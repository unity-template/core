// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parse git patch file parses a add and delete patch: add-and-delete-file.patch 1`] = `
Object {
  "authorEmail": "dherault@gmail.com",
  "authorName": "=?UTF-8?q?David=20H=C3=A9rault?=",
  "date": "Mon, 27 Jan 2020 17:36:29 +0100",
  "files": Array [
    Object {
      "added": false,
      "afterName": "README.md",
      "beforeName": "README.md",
      "deleted": true,
      "modifiedLines": Array [
        Object {
          "added": false,
          "line": "# stars-in-motion",
          "lineNumber": 2,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 3,
        },
        Object {
          "added": false,
          "line": "A canvas full of stars",
          "lineNumber": 4,
        },
      ],
    },
    Object {
      "added": true,
      "afterName": "README.mdx",
      "beforeName": "README.mdx",
      "deleted": false,
      "modifiedLines": Array [
        Object {
          "added": true,
          "line": "# stars-in-motion",
          "lineNumber": 2,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 3,
        },
        Object {
          "added": true,
          "line": "A canvas full of stars.",
          "lineNumber": 4,
        },
      ],
    },
  ],
  "hash": "74d652cd9cda9849591d1c414caae0af23b19c8d",
  "message": "[PATCH] Rename and edit README",
}
`;

exports[`parse git patch file parses a complex patch 1`] = `
Object {
  "authorEmail": "dherault@gmail.com",
  "authorName": "=?UTF-8?q?David=20H=C3=A9rault?=",
  "date": "Sat, 22 Jun 2019 18:41:22 +0200",
  "files": Array [
    Object {
      "added": false,
      "afterName": ".eslintignore",
      "beforeName": ".eslintignore",
      "deleted": false,
      "modifiedLines": Array [
        Object {
          "added": false,
          "line": "manual_test_nodejs",
          "lineNumber": 2,
        },
        Object {
          "added": false,
          "line": "manual_test_python",
          "lineNumber": 3,
        },
        Object {
          "added": false,
          "line": "manual_test_ruby",
          "lineNumber": 4,
        },
        Object {
          "added": false,
          "line": "manual_test_websocket",
          "lineNumber": 5,
        },
        Object {
          "added": true,
          "line": "**/node_modules",
          "lineNumber": 2,
        },
      ],
    },
    Object {
      "added": false,
      "afterName": ".eslintrc.js",
      "beforeName": ".eslintrc.js",
      "deleted": false,
      "modifiedLines": Array [
        Object {
          "added": true,
          "line": "  env: {",
          "lineNumber": 25,
        },
        Object {
          "added": true,
          "line": "    node: true,",
          "lineNumber": 26,
        },
        Object {
          "added": true,
          "line": "    mocha: true,",
          "lineNumber": 27,
        },
        Object {
          "added": true,
          "line": "  },",
          "lineNumber": 28,
        },
      ],
    },
    Object {
      "added": false,
      "afterName": "manual_test_nodejs/handler.js",
      "beforeName": "manual_test_nodejs/handler.js",
      "deleted": false,
      "modifiedLines": Array [
        Object {
          "added": false,
          "line": "'use strict';",
          "lineNumber": 2,
        },
        Object {
          "added": false,
          "line": "module.exports.authFunction = (event, context, callback) => {",
          "lineNumber": 32,
        },
        Object {
          "added": true,
          "line": "module.exports.authFunction = (event, context) => {",
          "lineNumber": 31,
        },
      ],
    },
    Object {
      "added": false,
      "afterName": "manual_test_nodejs/subprocess.js",
      "beforeName": "manual_test_nodejs/subprocess.js",
      "deleted": false,
      "modifiedLines": Array [
        Object {
          "added": false,
          "line": "'use strict';",
          "lineNumber": 2,
        },
      ],
    },
    Object {
      "added": true,
      "afterName": "manual_test_websocket/RouteSelection/handler.js",
      "beforeName": "manual_test_websocket/RouteSelection/handler.js",
      "deleted": false,
      "modifiedLines": Array [
        Object {
          "added": true,
          "line": "const AWS = require('aws-sdk');",
          "lineNumber": 2,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 3,
        },
        Object {
          "added": true,
          "line": "const successfullResponse = {",
          "lineNumber": 4,
        },
        Object {
          "added": true,
          "line": "  statusCode: 200,",
          "lineNumber": 5,
        },
        Object {
          "added": true,
          "line": "  body: 'Request is OK.',",
          "lineNumber": 6,
        },
        Object {
          "added": true,
          "line": "};",
          "lineNumber": 7,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 8,
        },
        Object {
          "added": true,
          "line": "module.exports.echo = async (event, context) => {",
          "lineNumber": 9,
        },
        Object {
          "added": true,
          "line": "  const action = JSON.parse(event.body);",
          "lineNumber": 10,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 11,
        },
        Object {
          "added": true,
          "line": "  await sendToClient(action.message, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context));",
          "lineNumber": 12,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 13,
        },
        Object {
          "added": true,
          "line": "  return successfullResponse;",
          "lineNumber": 14,
        },
        Object {
          "added": true,
          "line": "};",
          "lineNumber": 15,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 16,
        },
        Object {
          "added": true,
          "line": "const newAWSApiGatewayManagementApi = event => {",
          "lineNumber": 17,
        },
        Object {
          "added": true,
          "line": "  let endpoint = event.apiGatewayUrl;",
          "lineNumber": 18,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 19,
        },
        Object {
          "added": true,
          "line": "  if (!endpoint) endpoint = \`\${event.requestContext.domainName}/\${event.requestContext.stage}\`;",
          "lineNumber": 20,
        },
        Object {
          "added": true,
          "line": "  const apiVersion = '2018-11-29';",
          "lineNumber": 21,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 22,
        },
        Object {
          "added": true,
          "line": "  return new AWS.ApiGatewayManagementApi({ apiVersion, endpoint });",
          "lineNumber": 23,
        },
        Object {
          "added": true,
          "line": "};",
          "lineNumber": 24,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 25,
        },
        Object {
          "added": true,
          "line": "const sendToClient = (data, connectionId, apigwManagementApi) => {",
          "lineNumber": 26,
        },
        Object {
          "added": true,
          "line": "  // console.log(\`sendToClient:\${connectionId}\`);",
          "lineNumber": 27,
        },
        Object {
          "added": true,
          "line": "  let sendee = data;",
          "lineNumber": 28,
        },
        Object {
          "added": true,
          "line": "  if (typeof data === 'object') sendee = JSON.stringify(data);",
          "lineNumber": 29,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 30,
        },
        Object {
          "added": true,
          "line": "  return apigwManagementApi.postToConnection({ ConnectionId: connectionId, Data: sendee }).promise();",
          "lineNumber": 31,
        },
        Object {
          "added": true,
          "line": "};",
          "lineNumber": 32,
        },
      ],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/RouteSelection/package-lock.json",
      "beforeName": "manual_test_websocket/manual_test_websocket_RouteSelection/package-lock.json",
      "deleted": false,
      "modifiedLines": Array [],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/RouteSelection/package.json",
      "beforeName": "manual_test_websocket/manual_test_websocket_RouteSelection/package.json",
      "deleted": false,
      "modifiedLines": Array [],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/RouteSelection/scripts/deploy_to_aws.sh",
      "beforeName": "manual_test_websocket/manual_test_websocket_RouteSelection/scripts/deploy_to_aws.sh",
      "deleted": false,
      "modifiedLines": Array [],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/RouteSelection/scripts/deploy_to_offline.sh",
      "beforeName": "manual_test_websocket/manual_test_websocket_RouteSelection/scripts/deploy_to_offline.sh",
      "deleted": false,
      "modifiedLines": Array [],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/RouteSelection/scripts/serverless..yml",
      "beforeName": "manual_test_websocket/manual_test_websocket_RouteSelection/scripts/serverless..yml",
      "deleted": false,
      "modifiedLines": Array [],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/RouteSelection/scripts/serverless.aws.yml",
      "beforeName": "manual_test_websocket/manual_test_websocket_RouteSelection/scripts/serverless.aws.yml",
      "deleted": false,
      "modifiedLines": Array [],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/RouteSelection/scripts/serverless.offline.yml",
      "beforeName": "manual_test_websocket/manual_test_websocket_RouteSelection/scripts/serverless.offline.yml",
      "deleted": false,
      "modifiedLines": Array [],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/RouteSelection/serverless.yml",
      "beforeName": "manual_test_websocket/manual_test_websocket_RouteSelection/serverless.yml",
      "deleted": false,
      "modifiedLines": Array [],
    },
    Object {
      "added": true,
      "afterName": "manual_test_websocket/RouteSelection/test/e2e/ws.e2e.js",
      "beforeName": "manual_test_websocket/RouteSelection/test/e2e/ws.e2e.js",
      "deleted": false,
      "modifiedLines": Array [
        Object {
          "added": true,
          "line": "/* eslint-disable import/no-extraneous-dependencies */",
          "lineNumber": 2,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 3,
        },
        Object {
          "added": true,
          "line": "const chai = require('chai');",
          "lineNumber": 4,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 5,
        },
        Object {
          "added": true,
          "line": "const WebSocketTester = require('../support/WebSocketTester');",
          "lineNumber": 6,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 7,
        },
        Object {
          "added": true,
          "line": "const expect = chai.expect;",
          "lineNumber": 8,
        },
        Object {
          "added": true,
          "line": "const endpoint = process.env.npm_config_endpoint || 'ws://localhost:3005';",
          "lineNumber": 9,
        },
        Object {
          "added": true,
          "line": "const timeout = process.env.npm_config_timeout ? parseInt(process.env.npm_config_timeout) : 1000;",
          "lineNumber": 10,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 11,
        },
        Object {
          "added": true,
          "line": "describe('serverless', () => {",
          "lineNumber": 12,
        },
        Object {
          "added": true,
          "line": "  describe('with WebSocket support', () => {",
          "lineNumber": 13,
        },
        Object {
          "added": true,
          "line": "    let clients = [];",
          "lineNumber": 14,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 15,
        },
        Object {
          "added": true,
          "line": "    const createWebSocket = async qs => {",
          "lineNumber": 16,
        },
        Object {
          "added": true,
          "line": "      const ws = new WebSocketTester();",
          "lineNumber": 17,
        },
        Object {
          "added": true,
          "line": "      let url = endpoint;",
          "lineNumber": 18,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 19,
        },
        Object {
          "added": true,
          "line": "      if (qs) url = \`\${endpoint}?\${qs}\`;",
          "lineNumber": 20,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 21,
        },
        Object {
          "added": true,
          "line": "      await ws.open(url);",
          "lineNumber": 22,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 23,
        },
        Object {
          "added": true,
          "line": "      clients.push(ws);",
          "lineNumber": 24,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 25,
        },
        Object {
          "added": true,
          "line": "      return ws;",
          "lineNumber": 26,
        },
        Object {
          "added": true,
          "line": "    };",
          "lineNumber": 27,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 28,
        },
        Object {
          "added": true,
          "line": "    beforeEach(() => {",
          "lineNumber": 29,
        },
        Object {
          "added": true,
          "line": "      clients = [];",
          "lineNumber": 30,
        },
        Object {
          "added": true,
          "line": "    });",
          "lineNumber": 31,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 32,
        },
        Object {
          "added": true,
          "line": "    afterEach(async () => {",
          "lineNumber": 33,
        },
        Object {
          "added": true,
          "line": "      await Promise.all(clients.map(async (ws, i) => {",
          "lineNumber": 34,
        },
        Object {
          "added": true,
          "line": "        const n = ws.countUnrecived();",
          "lineNumber": 35,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 36,
        },
        Object {
          "added": true,
          "line": "        if (n > 0) {",
          "lineNumber": 37,
        },
        Object {
          "added": true,
          "line": "          console.log(\`unreceived:[i=\${i}]\`);",
          "lineNumber": 38,
        },
        Object {
          "added": true,
          "line": "          (await ws.receive(n)).forEach(m => console.log(m));",
          "lineNumber": 39,
        },
        Object {
          "added": true,
          "line": "        }",
          "lineNumber": 40,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 41,
        },
        Object {
          "added": true,
          "line": "        expect(n).to.equal(0);",
          "lineNumber": 42,
        },
        Object {
          "added": true,
          "line": "        ws.close();",
          "lineNumber": 43,
        },
        Object {
          "added": true,
          "line": "      }));",
          "lineNumber": 44,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 45,
        },
        Object {
          "added": true,
          "line": "      clients = [];",
          "lineNumber": 46,
        },
        Object {
          "added": true,
          "line": "    });",
          "lineNumber": 47,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 48,
        },
        Object {
          "added": true,
          "line": "    it('should call action \\\\'echo\\\\' handler located at service.do', async () => {",
          "lineNumber": 49,
        },
        Object {
          "added": true,
          "line": "      const ws = await createWebSocket();",
          "lineNumber": 50,
        },
        Object {
          "added": true,
          "line": "      const now = \`\${Date.now()}\`;",
          "lineNumber": 51,
        },
        Object {
          "added": true,
          "line": "      const payload = JSON.stringify({ service:{ do:'echo' }, message:now });",
          "lineNumber": 52,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 53,
        },
        Object {
          "added": true,
          "line": "      ws.send(payload);",
          "lineNumber": 54,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 55,
        },
        Object {
          "added": true,
          "line": "      expect(await ws.receive1()).to.equal(\`\${now}\`);",
          "lineNumber": 56,
        },
        Object {
          "added": true,
          "line": "    }).timeout(timeout);",
          "lineNumber": 57,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 58,
        },
        Object {
          "added": true,
          "line": "  });",
          "lineNumber": 59,
        },
        Object {
          "added": true,
          "line": "});",
          "lineNumber": 60,
        },
      ],
    },
    Object {
      "added": true,
      "afterName": "manual_test_websocket/RouteSelection/test/support/WebSocketTester.js",
      "beforeName": "manual_test_websocket/RouteSelection/test/support/WebSocketTester.js",
      "deleted": false,
      "modifiedLines": Array [
        Object {
          "added": true,
          "line": "/* eslint-disable import/no-extraneous-dependencies */",
          "lineNumber": 2,
        },
        Object {
          "added": true,
          "line": "const WebSocket = require('ws');",
          "lineNumber": 3,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 4,
        },
        Object {
          "added": true,
          "line": "class WebSocketTester {",
          "lineNumber": 5,
        },
        Object {
          "added": true,
          "line": "  constructor() {",
          "lineNumber": 6,
        },
        Object {
          "added": true,
          "line": "    this.messages = []; this.receivers = [];",
          "lineNumber": 7,
        },
        Object {
          "added": true,
          "line": "  }",
          "lineNumber": 8,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 9,
        },
        Object {
          "added": true,
          "line": "  open(url) {",
          "lineNumber": 10,
        },
        Object {
          "added": true,
          "line": "    if (this.ws != null) return;",
          "lineNumber": 11,
        },
        Object {
          "added": true,
          "line": "    const ws = this.ws = new WebSocket(url);",
          "lineNumber": 12,
        },
        Object {
          "added": true,
          "line": "    ws.on('message', message => {",
          "lineNumber": 13,
        },
        Object {
          "added": true,
          "line": "      // console.log('Received: '+message);",
          "lineNumber": 14,
        },
        Object {
          "added": true,
          "line": "      if (this.receivers.length > 0) this.receivers.shift()(message);",
          "lineNumber": 15,
        },
        Object {
          "added": true,
          "line": "      else this.messages.push(message);",
          "lineNumber": 16,
        },
        Object {
          "added": true,
          "line": "    });",
          "lineNumber": 17,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 18,
        },
        Object {
          "added": true,
          "line": "    return new Promise(resolve => {",
          "lineNumber": 19,
        },
        Object {
          "added": true,
          "line": "      ws.on('open', () => {",
          "lineNumber": 20,
        },
        Object {
          "added": true,
          "line": "        resolve(true);",
          "lineNumber": 21,
        },
        Object {
          "added": true,
          "line": "      });",
          "lineNumber": 22,
        },
        Object {
          "added": true,
          "line": "    });",
          "lineNumber": 23,
        },
        Object {
          "added": true,
          "line": "  }",
          "lineNumber": 24,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 25,
        },
        Object {
          "added": true,
          "line": "  send(data) {",
          "lineNumber": 26,
        },
        Object {
          "added": true,
          "line": "    this.ws.send(data);",
          "lineNumber": 27,
        },
        Object {
          "added": true,
          "line": "  }",
          "lineNumber": 28,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 29,
        },
        Object {
          "added": true,
          "line": "  receive1() {",
          "lineNumber": 30,
        },
        Object {
          "added": true,
          "line": "    return new Promise(resolve => {",
          "lineNumber": 31,
        },
        Object {
          "added": true,
          "line": "      if (this.messages.length > 0) resolve(this.messages.shift());",
          "lineNumber": 32,
        },
        Object {
          "added": true,
          "line": "      else this.receivers.push(resolve);",
          "lineNumber": 33,
        },
        Object {
          "added": true,
          "line": "    });",
          "lineNumber": 34,
        },
        Object {
          "added": true,
          "line": "  }",
          "lineNumber": 35,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 36,
        },
        Object {
          "added": true,
          "line": "  receive(n) {",
          "lineNumber": 37,
        },
        Object {
          "added": true,
          "line": "    return new Promise(resolve => {",
          "lineNumber": 38,
        },
        Object {
          "added": true,
          "line": "      const messages = [];",
          "lineNumber": 39,
        },
        Object {
          "added": true,
          "line": "      for (let i = 0; i < n; i += 1) {",
          "lineNumber": 40,
        },
        Object {
          "added": true,
          "line": "        this.receive1().then(message => {",
          "lineNumber": 41,
        },
        Object {
          "added": true,
          "line": "          messages[i] = message;",
          "lineNumber": 42,
        },
        Object {
          "added": true,
          "line": "          if (i === n - 1) resolve(messages);",
          "lineNumber": 43,
        },
        Object {
          "added": true,
          "line": "        });",
          "lineNumber": 44,
        },
        Object {
          "added": true,
          "line": "      }",
          "lineNumber": 45,
        },
        Object {
          "added": true,
          "line": "    });",
          "lineNumber": 46,
        },
        Object {
          "added": true,
          "line": "  }",
          "lineNumber": 47,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 48,
        },
        Object {
          "added": true,
          "line": "  skip() {",
          "lineNumber": 49,
        },
        Object {
          "added": true,
          "line": "    if (this.messages.length > 0) this.messages.shift();",
          "lineNumber": 50,
        },
        Object {
          "added": true,
          "line": "    else this.receivers.push(() => {});",
          "lineNumber": 51,
        },
        Object {
          "added": true,
          "line": "  }",
          "lineNumber": 52,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 53,
        },
        Object {
          "added": true,
          "line": "  countUnrecived() {",
          "lineNumber": 54,
        },
        Object {
          "added": true,
          "line": "    return this.messages.length;",
          "lineNumber": 55,
        },
        Object {
          "added": true,
          "line": "  }",
          "lineNumber": 56,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 57,
        },
        Object {
          "added": true,
          "line": "  close() {",
          "lineNumber": 58,
        },
        Object {
          "added": true,
          "line": "    if (this.ws != null) this.ws.close();",
          "lineNumber": 59,
        },
        Object {
          "added": true,
          "line": "  }",
          "lineNumber": 60,
        },
        Object {
          "added": true,
          "line": "}",
          "lineNumber": 61,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 62,
        },
        Object {
          "added": true,
          "line": "module.exports = WebSocketTester;",
          "lineNumber": 63,
        },
      ],
    },
    Object {
      "added": true,
      "afterName": "manual_test_websocket/main/handler.js",
      "beforeName": "manual_test_websocket/main/handler.js",
      "deleted": false,
      "modifiedLines": Array [
        Object {
          "added": true,
          "line": "const AWS = require('aws-sdk');",
          "lineNumber": 2,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 3,
        },
        Object {
          "added": true,
          "line": "const ddb = (() => {",
          "lineNumber": 4,
        },
        Object {
          "added": true,
          "line": "  if (process.env.IS_OFFLINE) return new AWS.DynamoDB.DocumentClient({ region: 'localhost', endpoint: 'http://localhost:8000' });",
          "lineNumber": 5,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 6,
        },
        Object {
          "added": true,
          "line": "  return new AWS.DynamoDB.DocumentClient();",
          "lineNumber": 7,
        },
        Object {
          "added": true,
          "line": "})();",
          "lineNumber": 8,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 9,
        },
        Object {
          "added": true,
          "line": "const successfullResponse = {",
          "lineNumber": 10,
        },
        Object {
          "added": true,
          "line": "  statusCode: 200,",
          "lineNumber": 11,
        },
        Object {
          "added": true,
          "line": "  body: 'Request is OK.',",
          "lineNumber": 12,
        },
        Object {
          "added": true,
          "line": "};",
          "lineNumber": 13,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 14,
        },
        Object {
          "added": true,
          "line": "module.exports.connect = async (event, context) => {",
          "lineNumber": 15,
        },
        Object {
          "added": true,
          "line": "  // console.log('connect:');",
          "lineNumber": 16,
        },
        Object {
          "added": true,
          "line": "  const listener = await ddb.get({ TableName:'listeners', Key:{ name:'default' } }).promise();",
          "lineNumber": 17,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 18,
        },
        Object {
          "added": true,
          "line": "  if (listener.Item) {",
          "lineNumber": 19,
        },
        Object {
          "added": true,
          "line": "    const timeout = new Promise(resolve => setTimeout(resolve, 100));",
          "lineNumber": 20,
        },
        Object {
          "added": true,
          "line": "    const send = sendToClient( // sendToClient won't return on AWS when client doesn't exits so we set a timeout",
          "lineNumber": 21,
        },
        Object {
          "added": true,
          "line": "      JSON.stringify({ action:'update', event:'connect', info:{ id:event.requestContext.connectionId, event:{ ...event, apiGatewayUrl:\`\${event.apiGatewayUrl}\` }, context } }),",
          "lineNumber": 22,
        },
        Object {
          "added": true,
          "line": "      listener.Item.id,",
          "lineNumber": 23,
        },
        Object {
          "added": true,
          "line": "      newAWSApiGatewayManagementApi(event, context)).catch(() => {});",
          "lineNumber": 24,
        },
        Object {
          "added": true,
          "line": "    await Promise.race([send, timeout]);",
          "lineNumber": 25,
        },
        Object {
          "added": true,
          "line": "  }",
          "lineNumber": 26,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 27,
        },
        Object {
          "added": true,
          "line": "  return successfullResponse;",
          "lineNumber": 28,
        },
        Object {
          "added": true,
          "line": "};",
          "lineNumber": 29,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 30,
        },
        Object {
          "added": true,
          "line": "// module.export.auth = (event, context, callback) => {",
          "lineNumber": 31,
        },
        Object {
          "added": true,
          "line": "//   //console.log('auth:');",
          "lineNumber": 32,
        },
        Object {
          "added": true,
          "line": "//   const token = event.headers[\\"Authorization\\"];",
          "lineNumber": 33,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 34,
        },
        Object {
          "added": true,
          "line": "//   if ('deny'===token) callback(null, generatePolicy('user', 'Deny', event.methodArn));",
          "lineNumber": 35,
        },
        Object {
          "added": true,
          "line": "//   else callback(null, generatePolicy('user', 'Allow', event.methodArn));;",
          "lineNumber": 36,
        },
        Object {
          "added": true,
          "line": "// };",
          "lineNumber": 37,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 38,
        },
        Object {
          "added": true,
          "line": "module.exports.disconnect = async (event, context) => {",
          "lineNumber": 39,
        },
        Object {
          "added": true,
          "line": "  const listener = await ddb.get({ TableName:'listeners', Key:{ name:'default' } }).promise();",
          "lineNumber": 40,
        },
        Object {
          "added": true,
          "line": "  if (listener.Item) await sendToClient(JSON.stringify({ action:'update', event:'disconnect', info:{ id:event.requestContext.connectionId, event:{ ...event, apiGatewayUrl:\`\${event.apiGatewayUrl}\` }, context } }), listener.Item.id, newAWSApiGatewayManagementApi(event, context)).catch(() => {});",
          "lineNumber": 41,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 42,
        },
        Object {
          "added": true,
          "line": "  return successfullResponse;",
          "lineNumber": 43,
        },
        Object {
          "added": true,
          "line": "};",
          "lineNumber": 44,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 45,
        },
        Object {
          "added": true,
          "line": "module.exports.defaultHandler = async (event, context) => {",
          "lineNumber": 46,
        },
        Object {
          "added": true,
          "line": "  await sendToClient(\`Error: No Supported Action in Payload '\${event.body}'\`, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err => console.log(err));",
          "lineNumber": 47,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 48,
        },
        Object {
          "added": true,
          "line": "  return successfullResponse;",
          "lineNumber": 49,
        },
        Object {
          "added": true,
          "line": "};",
          "lineNumber": 50,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 51,
        },
        Object {
          "added": true,
          "line": "module.exports.getClientInfo = async (event, context) => {",
          "lineNumber": 52,
        },
        Object {
          "added": true,
          "line": "  // console.log('getClientInfo:');",
          "lineNumber": 53,
        },
        Object {
          "added": true,
          "line": "  await sendToClient({ action:'update', event:'client-info', info:{ id:event.requestContext.connectionId } }, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err => console.log(err));",
          "lineNumber": 54,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 55,
        },
        Object {
          "added": true,
          "line": "  return successfullResponse;",
          "lineNumber": 56,
        },
        Object {
          "added": true,
          "line": "};",
          "lineNumber": 57,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 58,
        },
        Object {
          "added": true,
          "line": "module.exports.getCallInfo = async (event, context) => {",
          "lineNumber": 59,
        },
        Object {
          "added": true,
          "line": "  await sendToClient({ action:'update', event:'call-info', info:{ event:{ ...event, apiGatewayUrl:\`\${event.apiGatewayUrl}\` }, context } }, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err => console.log(err));",
          "lineNumber": 60,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 61,
        },
        Object {
          "added": true,
          "line": "  return successfullResponse;",
          "lineNumber": 62,
        },
        Object {
          "added": true,
          "line": "};",
          "lineNumber": 63,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 64,
        },
        Object {
          "added": true,
          "line": "module.exports.makeError = async () => {",
          "lineNumber": 65,
        },
        Object {
          "added": true,
          "line": "  const obj = null;",
          "lineNumber": 66,
        },
        Object {
          "added": true,
          "line": "  obj.non.non = 1;",
          "lineNumber": 67,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 68,
        },
        Object {
          "added": true,
          "line": "  return successfullResponse;",
          "lineNumber": 69,
        },
        Object {
          "added": true,
          "line": "};",
          "lineNumber": 70,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 71,
        },
        Object {
          "added": true,
          "line": "module.exports.replyViaCallback = (event, context, callback) => {",
          "lineNumber": 72,
        },
        Object {
          "added": true,
          "line": "  sendToClient({ action:'update', event:'reply-via-callback' }, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err => console.log(err));",
          "lineNumber": 73,
        },
        Object {
          "added": true,
          "line": "  callback();",
          "lineNumber": 74,
        },
        Object {
          "added": true,
          "line": "};",
          "lineNumber": 75,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 76,
        },
        Object {
          "added": true,
          "line": "module.exports.replyErrorViaCallback = (event, context, callback) => callback('error error error');",
          "lineNumber": 77,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 78,
        },
        Object {
          "added": true,
          "line": "module.exports.multiCall1 = async (event, context) => {",
          "lineNumber": 79,
        },
        Object {
          "added": true,
          "line": "  await sendToClient({ action:'update', event:'made-call-1' }, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err => console.log(err));",
          "lineNumber": 80,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 81,
        },
        Object {
          "added": true,
          "line": "  return successfullResponse;",
          "lineNumber": 82,
        },
        Object {
          "added": true,
          "line": "};",
          "lineNumber": 83,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 84,
        },
        Object {
          "added": true,
          "line": "module.exports.multiCall2 = async (event, context) => {",
          "lineNumber": 85,
        },
        Object {
          "added": true,
          "line": "  await sendToClient({ action:'update', event:'made-call-2' }, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err => console.log(err));",
          "lineNumber": 86,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 87,
        },
        Object {
          "added": true,
          "line": "  return successfullResponse;",
          "lineNumber": 88,
        },
        Object {
          "added": true,
          "line": "};",
          "lineNumber": 89,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 90,
        },
        Object {
          "added": true,
          "line": "module.exports.send = async (event, context) => {",
          "lineNumber": 91,
        },
        Object {
          "added": true,
          "line": "  const action = JSON.parse(event.body);",
          "lineNumber": 92,
        },
        Object {
          "added": true,
          "line": "  const sents = [];",
          "lineNumber": 93,
        },
        Object {
          "added": true,
          "line": "  action.clients.forEach(connectionId => {",
          "lineNumber": 94,
        },
        Object {
          "added": true,
          "line": "    const sent = sendToClient(action.data, connectionId, newAWSApiGatewayManagementApi(event, context));",
          "lineNumber": 95,
        },
        Object {
          "added": true,
          "line": "    sents.push(sent);",
          "lineNumber": 96,
        },
        Object {
          "added": true,
          "line": "  });",
          "lineNumber": 97,
        },
        Object {
          "added": true,
          "line": "  const noErr = await Promise.all(sents).then(() => true).catch(() => false);",
          "lineNumber": 98,
        },
        Object {
          "added": true,
          "line": "  if (!noErr) await sendToClient('Error: Could not Send all Messages', event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context));",
          "lineNumber": 99,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 100,
        },
        Object {
          "added": true,
          "line": "  return successfullResponse;",
          "lineNumber": 101,
        },
        Object {
          "added": true,
          "line": "};",
          "lineNumber": 102,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 103,
        },
        Object {
          "added": true,
          "line": "module.exports.registerListener = async (event, context) => {",
          "lineNumber": 104,
        },
        Object {
          "added": true,
          "line": "  await ddb.put({ TableName:'listeners', Item:{ name:'default', id:event.requestContext.connectionId } }).promise();",
          "lineNumber": 105,
        },
        Object {
          "added": true,
          "line": "  await sendToClient({ action:'update', event:'register-listener', info:{ id:event.requestContext.connectionId } }, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err => console.log(err));",
          "lineNumber": 106,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 107,
        },
        Object {
          "added": true,
          "line": "  return successfullResponse;",
          "lineNumber": 108,
        },
        Object {
          "added": true,
          "line": "};",
          "lineNumber": 109,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 110,
        },
        Object {
          "added": true,
          "line": "module.exports.deleteListener = async () => {",
          "lineNumber": 111,
        },
        Object {
          "added": true,
          "line": "  await ddb.delete({ TableName:'listeners', Key:{ name:'default' } }).promise();",
          "lineNumber": 112,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 113,
        },
        Object {
          "added": true,
          "line": "  return successfullResponse;",
          "lineNumber": 114,
        },
        Object {
          "added": true,
          "line": "};",
          "lineNumber": 115,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 116,
        },
        Object {
          "added": true,
          "line": "const newAWSApiGatewayManagementApi = event => {",
          "lineNumber": 117,
        },
        Object {
          "added": true,
          "line": "  let endpoint = event.apiGatewayUrl;",
          "lineNumber": 118,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 119,
        },
        Object {
          "added": true,
          "line": "  if (!endpoint) endpoint = \`\${event.requestContext.domainName}/\${event.requestContext.stage}\`;",
          "lineNumber": 120,
        },
        Object {
          "added": true,
          "line": "  const apiVersion = '2018-11-29';",
          "lineNumber": 121,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 122,
        },
        Object {
          "added": true,
          "line": "  return new AWS.ApiGatewayManagementApi({ apiVersion, endpoint });",
          "lineNumber": 123,
        },
        Object {
          "added": true,
          "line": "};",
          "lineNumber": 124,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 125,
        },
        Object {
          "added": true,
          "line": "const sendToClient = (data, connectionId, apigwManagementApi) => {",
          "lineNumber": 126,
        },
        Object {
          "added": true,
          "line": "  // console.log(\`sendToClient:\${connectionId}\`);",
          "lineNumber": 127,
        },
        Object {
          "added": true,
          "line": "  let sendee = data;",
          "lineNumber": 128,
        },
        Object {
          "added": true,
          "line": "  if (typeof data === 'object') sendee = JSON.stringify(data);",
          "lineNumber": 129,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 130,
        },
        Object {
          "added": true,
          "line": "  return apigwManagementApi.postToConnection({ ConnectionId: connectionId, Data: sendee }).promise();",
          "lineNumber": 131,
        },
        Object {
          "added": true,
          "line": "};",
          "lineNumber": 132,
        },
      ],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/main/package-lock.json",
      "beforeName": "manual_test_websocket/manual_test_websocket_main/package-lock.json",
      "deleted": false,
      "modifiedLines": Array [],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/main/package.json",
      "beforeName": "manual_test_websocket/manual_test_websocket_main/package.json",
      "deleted": false,
      "modifiedLines": Array [],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/main/scripts/deploy_to_aws.sh",
      "beforeName": "manual_test_websocket/manual_test_websocket_main/scripts/deploy_to_aws.sh",
      "deleted": false,
      "modifiedLines": Array [],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/main/scripts/deploy_to_offline.sh",
      "beforeName": "manual_test_websocket/manual_test_websocket_main/scripts/deploy_to_offline.sh",
      "deleted": false,
      "modifiedLines": Array [],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/main/scripts/serverless..yml",
      "beforeName": "manual_test_websocket/manual_test_websocket_main/scripts/serverless..yml",
      "deleted": false,
      "modifiedLines": Array [],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/main/scripts/serverless.aws.yml",
      "beforeName": "manual_test_websocket/manual_test_websocket_main/scripts/serverless.aws.yml",
      "deleted": false,
      "modifiedLines": Array [],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/main/scripts/serverless.offline.yml",
      "beforeName": "manual_test_websocket/manual_test_websocket_main/scripts/serverless.offline.yml",
      "deleted": false,
      "modifiedLines": Array [],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/main/serverless.yml",
      "beforeName": "manual_test_websocket/manual_test_websocket_main/serverless.yml",
      "deleted": false,
      "modifiedLines": Array [],
    },
    Object {
      "added": true,
      "afterName": "manual_test_websocket/main/test/e2e/ws.e2e.js",
      "beforeName": "manual_test_websocket/main/test/e2e/ws.e2e.js",
      "deleted": false,
      "modifiedLines": Array [
        Object {
          "added": true,
          "line": "/* eslint-disable import/no-extraneous-dependencies */",
          "lineNumber": 2,
        },
        Object {
          "added": true,
          "line": "/* eslint-disable no-unused-expressions */",
          "lineNumber": 3,
        },
        Object {
          "added": true,
          "line": "const chai = require('chai');",
          "lineNumber": 4,
        },
        Object {
          "added": true,
          "line": "const chaiHttp = require('chai-http');",
          "lineNumber": 5,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 6,
        },
        Object {
          "added": true,
          "line": "chai.use(chaiHttp);",
          "lineNumber": 7,
        },
        Object {
          "added": true,
          "line": "const expect = chai.expect;",
          "lineNumber": 8,
        },
        Object {
          "added": true,
          "line": "const aws4 = require('aws4');",
          "lineNumber": 9,
        },
        Object {
          "added": true,
          "line": "const awscred = require('awscred');",
          "lineNumber": 10,
        },
        Object {
          "added": true,
          "line": "const moment = require('moment');",
          "lineNumber": 11,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 12,
        },
        Object {
          "added": true,
          "line": "const endpoint = process.env.npm_config_endpoint || 'ws://localhost:3001';",
          "lineNumber": 13,
        },
        Object {
          "added": true,
          "line": "const timeout = process.env.npm_config_timeout ? parseInt(process.env.npm_config_timeout) : 1000;",
          "lineNumber": 14,
        },
        Object {
          "added": true,
          "line": "const WebSocketTester = require('../support/WebSocketTester');",
          "lineNumber": 15,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 16,
        },
        Object {
          "added": true,
          "line": "describe('serverless', () => {",
          "lineNumber": 17,
        },
        Object {
          "added": true,
          "line": "  describe('with WebSocket support', () => {",
          "lineNumber": 18,
        },
        Object {
          "added": true,
          "line": "    let clients = []; let req = null; let cred = null;",
          "lineNumber": 19,
        },
        Object {
          "added": true,
          "line": "    const createWebSocket = async qs => {",
          "lineNumber": 20,
        },
        Object {
          "added": true,
          "line": "      const ws = new WebSocketTester();",
          "lineNumber": 21,
        },
        Object {
          "added": true,
          "line": "      let url = endpoint;",
          "lineNumber": 22,
        },
        Object {
          "added": true,
          "line": "      if (qs) url = \`\${endpoint}?\${qs}\`;",
          "lineNumber": 23,
        },
        Object {
          "added": true,
          "line": "      await ws.open(url);",
          "lineNumber": 24,
        },
        Object {
          "added": true,
          "line": "      clients.push(ws);",
          "lineNumber": 25,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 26,
        },
        Object {
          "added": true,
          "line": "      return ws;",
          "lineNumber": 27,
        },
        Object {
          "added": true,
          "line": "    };",
          "lineNumber": 28,
        },
        Object {
          "added": true,
          "line": "    const createClient = async qs => {",
          "lineNumber": 29,
        },
        Object {
          "added": true,
          "line": "      const ws = await createWebSocket(qs);",
          "lineNumber": 30,
        },
        Object {
          "added": true,
          "line": "      ws.send(JSON.stringify({ action:'getClientInfo' }));",
          "lineNumber": 31,
        },
        Object {
          "added": true,
          "line": "      const json = await ws.receive1();",
          "lineNumber": 32,
        },
        Object {
          "added": true,
          "line": "      const id = JSON.parse(json).info.id;",
          "lineNumber": 33,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 34,
        },
        Object {
          "added": true,
          "line": "      return { ws, id };",
          "lineNumber": 35,
        },
        Object {
          "added": true,
          "line": "    };",
          "lineNumber": 36,
        },
        Object {
          "added": true,
          "line": "    before(async () => {",
          "lineNumber": 37,
        },
        Object {
          "added": true,
          "line": "      req = chai.request(\`\${endpoint.replace('ws://', 'http://').replace('wss://', 'https://')}\`).keepOpen();",
          "lineNumber": 38,
        },
        Object {
          "added": true,
          "line": "      // req=chai.request('http://localhost:3001/dev').keepOpen();",
          "lineNumber": 39,
        },
        Object {
          "added": true,
          "line": "      cred = await new Promise((resolve, reject) => {",
          "lineNumber": 40,
        },
        Object {
          "added": true,
          "line": "        awscred.loadCredentials((err, data) => {",
          "lineNumber": 41,
        },
        Object {
          "added": true,
          "line": "          if (err) reject(err); else resolve(data);",
          "lineNumber": 42,
        },
        Object {
          "added": true,
          "line": "        });",
          "lineNumber": 43,
        },
        Object {
          "added": true,
          "line": "      });",
          "lineNumber": 44,
        },
        Object {
          "added": true,
          "line": "    });",
          "lineNumber": 45,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 46,
        },
        Object {
          "added": true,
          "line": "    beforeEach(() => {",
          "lineNumber": 47,
        },
        Object {
          "added": true,
          "line": "      clients = [];",
          "lineNumber": 48,
        },
        Object {
          "added": true,
          "line": "    });",
          "lineNumber": 49,
        },
        Object {
          "added": true,
          "line": "    afterEach(async () => {",
          "lineNumber": 50,
        },
        Object {
          "added": true,
          "line": "      await Promise.all(clients.map(async (ws, i) => {",
          "lineNumber": 51,
        },
        Object {
          "added": true,
          "line": "        const n = ws.countUnrecived();",
          "lineNumber": 52,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 53,
        },
        Object {
          "added": true,
          "line": "        if (n > 0) {",
          "lineNumber": 54,
        },
        Object {
          "added": true,
          "line": "          console.log(\`unreceived:[i=\${i}]\`);",
          "lineNumber": 55,
        },
        Object {
          "added": true,
          "line": "          (await ws.receive(n)).forEach(m => console.log(m));",
          "lineNumber": 56,
        },
        Object {
          "added": true,
          "line": "        }",
          "lineNumber": 57,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 58,
        },
        Object {
          "added": true,
          "line": "        expect(n).to.equal(0);",
          "lineNumber": 59,
        },
        Object {
          "added": true,
          "line": "        ws.close();",
          "lineNumber": 60,
        },
        Object {
          "added": true,
          "line": "      }));",
          "lineNumber": 61,
        },
        Object {
          "added": true,
          "line": "      clients = [];",
          "lineNumber": 62,
        },
        Object {
          "added": true,
          "line": "    });",
          "lineNumber": 63,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 64,
        },
        Object {
          "added": true,
          "line": "    it('should request to upgade to WebSocket when receving an HTTP request', async () => {",
          "lineNumber": 65,
        },
        Object {
          "added": true,
          "line": "      const req = chai.request(\`\${endpoint.replace('ws://', 'http://').replace('wss://', 'https://')}\`).keepOpen();",
          "lineNumber": 66,
        },
        Object {
          "added": true,
          "line": "      let res = await req.get(\`/\${Date.now()}\`);// .set('Authorization', user.accessToken);",
          "lineNumber": 67,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 68,
        },
        Object {
          "added": true,
          "line": "      expect(res).to.have.status(426);",
          "lineNumber": 69,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 70,
        },
        Object {
          "added": true,
          "line": "      res = await req.get(\`/\${Date.now()}/\${Date.now()}\`);// .set('Authorization', user.accessToken);",
          "lineNumber": 71,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 72,
        },
        Object {
          "added": true,
          "line": "      expect(res).to.have.status(426);",
          "lineNumber": 73,
        },
        Object {
          "added": true,
          "line": "    }).timeout(timeout);",
          "lineNumber": 74,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 75,
        },
        Object {
          "added": true,
          "line": "    it('should open a WebSocket', async () => {",
          "lineNumber": 76,
        },
        Object {
          "added": true,
          "line": "      const ws = await createWebSocket();",
          "lineNumber": 77,
        },
        Object {
          "added": true,
          "line": "      expect(ws).not.to.be.undefined;",
          "lineNumber": 78,
        },
        Object {
          "added": true,
          "line": "    }).timeout(timeout);",
          "lineNumber": 79,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 80,
        },
        Object {
          "added": true,
          "line": "    it('should receive client connection info', async () => {",
          "lineNumber": 81,
        },
        Object {
          "added": true,
          "line": "      const ws = await createWebSocket();",
          "lineNumber": 82,
        },
        Object {
          "added": true,
          "line": "      ws.send(JSON.stringify({ action:'getClientInfo' }));",
          "lineNumber": 83,
        },
        Object {
          "added": true,
          "line": "      const clientInfo = JSON.parse(await ws.receive1());",
          "lineNumber": 84,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 85,
        },
        Object {
          "added": true,
          "line": "      expect(clientInfo).to.deep.equal({ action:'update', event:'client-info', info:{ id:clientInfo.info.id } });",
          "lineNumber": 86,
        },
        Object {
          "added": true,
          "line": "    }).timeout(timeout);",
          "lineNumber": 87,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 88,
        },
        Object {
          "added": true,
          "line": "    it('should call default handler when no such action exists', async () => {",
          "lineNumber": 89,
        },
        Object {
          "added": true,
          "line": "      const ws = await createWebSocket();",
          "lineNumber": 90,
        },
        Object {
          "added": true,
          "line": "      const payload = JSON.stringify({ action:\`action\${Date.now()}\` });",
          "lineNumber": 91,
        },
        Object {
          "added": true,
          "line": "      ws.send(payload);",
          "lineNumber": 92,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 93,
        },
        Object {
          "added": true,
          "line": "      expect(await ws.receive1()).to.equal(\`Error: No Supported Action in Payload '\${payload}'\`);",
          "lineNumber": 94,
        },
        Object {
          "added": true,
          "line": "    }).timeout(timeout);",
          "lineNumber": 95,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 96,
        },
        Object {
          "added": true,
          "line": "    it('should call default handler when no action provided', async () => {",
          "lineNumber": 97,
        },
        Object {
          "added": true,
          "line": "      const ws = await createWebSocket();",
          "lineNumber": 98,
        },
        Object {
          "added": true,
          "line": "      ws.send(JSON.stringify({ hello:'world' }));",
          "lineNumber": 99,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 100,
        },
        Object {
          "added": true,
          "line": "      expect(await ws.receive1()).to.equal('Error: No Supported Action in Payload \\\\'{\\"hello\\":\\"world\\"}\\\\'');",
          "lineNumber": 101,
        },
        Object {
          "added": true,
          "line": "    }).timeout(timeout);",
          "lineNumber": 102,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 103,
        },
        Object {
          "added": true,
          "line": "    it('should send & receive data', async () => {",
          "lineNumber": 104,
        },
        Object {
          "added": true,
          "line": "      const c1 = await createClient();",
          "lineNumber": 105,
        },
        Object {
          "added": true,
          "line": "      const c2 = await createClient();",
          "lineNumber": 106,
        },
        Object {
          "added": true,
          "line": "      c1.ws.send(JSON.stringify({ action:'send', data:'Hello World!', clients:[c1.id, c2.id] }));",
          "lineNumber": 107,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 108,
        },
        Object {
          "added": true,
          "line": "      expect(await c1.ws.receive1()).to.equal('Hello World!');",
          "lineNumber": 109,
        },
        Object {
          "added": true,
          "line": "      expect(await c2.ws.receive1()).to.equal('Hello World!');",
          "lineNumber": 110,
        },
        Object {
          "added": true,
          "line": "    }).timeout(timeout);",
          "lineNumber": 111,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 112,
        },
        Object {
          "added": true,
          "line": "    it('should respond when having an internal server error', async () => {",
          "lineNumber": 113,
        },
        Object {
          "added": true,
          "line": "      const conn = await createClient();",
          "lineNumber": 114,
        },
        Object {
          "added": true,
          "line": "      conn.ws.send(JSON.stringify({ action:'makeError' }));",
          "lineNumber": 115,
        },
        Object {
          "added": true,
          "line": "      const res = JSON.parse(await conn.ws.receive1());",
          "lineNumber": 116,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 117,
        },
        Object {
          "added": true,
          "line": "      expect(res).to.deep.equal({ message:'Internal server error', connectionId:conn.id, requestId:res.requestId });",
          "lineNumber": 118,
        },
        Object {
          "added": true,
          "line": "    }).timeout(timeout);",
          "lineNumber": 119,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 120,
        },
        Object {
          "added": true,
          "line": "    it('should respond via callback', async () => {",
          "lineNumber": 121,
        },
        Object {
          "added": true,
          "line": "      const ws = await createWebSocket();",
          "lineNumber": 122,
        },
        Object {
          "added": true,
          "line": "      ws.send(JSON.stringify({ action:'replyViaCallback' }));",
          "lineNumber": 123,
        },
        Object {
          "added": true,
          "line": "      const res = JSON.parse(await ws.receive1());",
          "lineNumber": 124,
        },
        Object {
          "added": true,
          "line": "      expect(res).to.deep.equal({ action:'update', event:'reply-via-callback' });",
          "lineNumber": 125,
        },
        Object {
          "added": true,
          "line": "    }).timeout(timeout);",
          "lineNumber": 126,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 127,
        },
        Object {
          "added": true,
          "line": "    it('should respond with error when calling callback(error)', async () => {",
          "lineNumber": 128,
        },
        Object {
          "added": true,
          "line": "      const conn = await createClient();",
          "lineNumber": 129,
        },
        Object {
          "added": true,
          "line": "      conn.ws.send(JSON.stringify({ action:'replyErrorViaCallback' }));",
          "lineNumber": 130,
        },
        Object {
          "added": true,
          "line": "      const res = JSON.parse(await conn.ws.receive1());",
          "lineNumber": 131,
        },
        Object {
          "added": true,
          "line": "      expect(res).to.deep.equal({ message:'Internal server error', connectionId:conn.id, requestId:res.requestId });",
          "lineNumber": 132,
        },
        Object {
          "added": true,
          "line": "    }).timeout(timeout);",
          "lineNumber": 133,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 134,
        },
        Object {
          "added": true,
          "line": "    it('should respond with only the last action when there are more than one in the serverless.yml file', async () => {",
          "lineNumber": 135,
        },
        Object {
          "added": true,
          "line": "      const ws = await createWebSocket();",
          "lineNumber": 136,
        },
        Object {
          "added": true,
          "line": "      ws.send(JSON.stringify({ action:'makeMultiCalls' }));",
          "lineNumber": 137,
        },
        Object {
          "added": true,
          "line": "      const res = JSON.parse(await ws.receive1());",
          "lineNumber": 138,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 139,
        },
        Object {
          "added": true,
          "line": "      expect(res).to.deep.equal({ action:'update', event:'made-call-2' });",
          "lineNumber": 140,
        },
        Object {
          "added": true,
          "line": "    }).timeout(timeout);",
          "lineNumber": 141,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 142,
        },
        Object {
          "added": true,
          "line": "    it('should not send to non existing client', async () => {",
          "lineNumber": 143,
        },
        Object {
          "added": true,
          "line": "      const c1 = await createClient();",
          "lineNumber": 144,
        },
        Object {
          "added": true,
          "line": "      c1.ws.send(JSON.stringify({ action:'send', data:'Hello World!', clients:['non-existing-id'] }));",
          "lineNumber": 145,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 146,
        },
        Object {
          "added": true,
          "line": "      expect(await c1.ws.receive1()).to.equal('Error: Could not Send all Messages');",
          "lineNumber": 147,
        },
        Object {
          "added": true,
          "line": "    }).timeout(timeout);",
          "lineNumber": 148,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 149,
        },
        Object {
          "added": true,
          "line": "    it('should connect & disconnect', async () => {",
          "lineNumber": 150,
        },
        Object {
          "added": true,
          "line": "      const ws = await createWebSocket();",
          "lineNumber": 151,
        },
        Object {
          "added": true,
          "line": "      await ws.send(JSON.stringify({ action:'registerListener' }));",
          "lineNumber": 152,
        },
        Object {
          "added": true,
          "line": "      await ws.receive1();",
          "lineNumber": 153,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 154,
        },
        Object {
          "added": true,
          "line": "      const c1 = await createClient();",
          "lineNumber": 155,
        },
        Object {
          "added": true,
          "line": "      const connect1 = JSON.parse(await ws.receive1()); delete connect1.info.event; delete delete connect1.info.context;",
          "lineNumber": 156,
        },
        Object {
          "added": true,
          "line": "      expect(connect1).to.deep.equal({ action:'update', event:'connect', info:{ id:c1.id } });",
          "lineNumber": 157,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 158,
        },
        Object {
          "added": true,
          "line": "      const c2 = await createClient();",
          "lineNumber": 159,
        },
        Object {
          "added": true,
          "line": "      const connect2 = JSON.parse(await ws.receive1()); delete connect2.info.event; delete delete connect2.info.context;",
          "lineNumber": 160,
        },
        Object {
          "added": true,
          "line": "      expect(connect2).to.deep.equal({ action:'update', event:'connect', info:{ id:c2.id } });",
          "lineNumber": 161,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 162,
        },
        Object {
          "added": true,
          "line": "      c2.ws.close();",
          "lineNumber": 163,
        },
        Object {
          "added": true,
          "line": "      const disconnect2 = JSON.parse(await ws.receive1()); delete disconnect2.info.event; delete delete disconnect2.info.context;",
          "lineNumber": 164,
        },
        Object {
          "added": true,
          "line": "      expect(disconnect2).to.deep.equal({ action:'update', event:'disconnect', info:{ id:c2.id } });",
          "lineNumber": 165,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 166,
        },
        Object {
          "added": true,
          "line": "      const c3 = await createClient();",
          "lineNumber": 167,
        },
        Object {
          "added": true,
          "line": "      const connect3 = JSON.parse(await ws.receive1()); delete connect3.info.event; delete delete connect3.info.context;",
          "lineNumber": 168,
        },
        Object {
          "added": true,
          "line": "      expect(connect3).to.deep.equal({ action:'update', event:'connect', info:{ id:c3.id } });",
          "lineNumber": 169,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 170,
        },
        Object {
          "added": true,
          "line": "      c1.ws.close();",
          "lineNumber": 171,
        },
        Object {
          "added": true,
          "line": "      const disconnect1 = JSON.parse(await ws.receive1()); delete disconnect1.info.event; delete delete disconnect1.info.context;",
          "lineNumber": 172,
        },
        Object {
          "added": true,
          "line": "      expect(disconnect1).to.deep.equal({ action:'update', event:'disconnect', info:{ id:c1.id } });",
          "lineNumber": 173,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 174,
        },
        Object {
          "added": true,
          "line": "      c3.ws.close();",
          "lineNumber": 175,
        },
        Object {
          "added": true,
          "line": "      const disconnect3 = JSON.parse(await ws.receive1()); delete disconnect3.info.event; delete delete disconnect3.info.context;",
          "lineNumber": 176,
        },
        Object {
          "added": true,
          "line": "      expect(disconnect3).to.deep.equal({ action:'update', event:'disconnect', info:{ id:c3.id } });",
          "lineNumber": 177,
        },
        Object {
          "added": true,
          "line": "    }).timeout(timeout);",
          "lineNumber": 178,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 179,
        },
        Object {
          "added": true,
          "line": "    const createExpectedEvent = (connectionId, action, eventType, actualEvent) => {",
          "lineNumber": 180,
        },
        Object {
          "added": true,
          "line": "      const url = new URL(endpoint);",
          "lineNumber": 181,
        },
        Object {
          "added": true,
          "line": "      const expected = {",
          "lineNumber": 182,
        },
        Object {
          "added": true,
          "line": "        apiGatewayUrl: \`\${actualEvent.apiGatewayUrl}\`,",
          "lineNumber": 183,
        },
        Object {
          "added": true,
          "line": "        isBase64Encoded: false,",
          "lineNumber": 184,
        },
        Object {
          "added": true,
          "line": "        requestContext: {",
          "lineNumber": 185,
        },
        Object {
          "added": true,
          "line": "          apiId: actualEvent.requestContext.apiId,",
          "lineNumber": 186,
        },
        Object {
          "added": true,
          "line": "          connectedAt: actualEvent.requestContext.connectedAt,",
          "lineNumber": 187,
        },
        Object {
          "added": true,
          "line": "          connectionId: \`\${connectionId}\`,",
          "lineNumber": 188,
        },
        Object {
          "added": true,
          "line": "          domainName: url.hostname,",
          "lineNumber": 189,
        },
        Object {
          "added": true,
          "line": "          eventType,",
          "lineNumber": 190,
        },
        Object {
          "added": true,
          "line": "          extendedRequestId: actualEvent.requestContext.extendedRequestId,",
          "lineNumber": 191,
        },
        Object {
          "added": true,
          "line": "          identity: {",
          "lineNumber": 192,
        },
        Object {
          "added": true,
          "line": "            accessKey: null,",
          "lineNumber": 193,
        },
        Object {
          "added": true,
          "line": "            accountId: null,",
          "lineNumber": 194,
        },
        Object {
          "added": true,
          "line": "            caller: null,",
          "lineNumber": 195,
        },
        Object {
          "added": true,
          "line": "            cognitoAuthenticationProvider: null,",
          "lineNumber": 196,
        },
        Object {
          "added": true,
          "line": "            cognitoAuthenticationType: null,",
          "lineNumber": 197,
        },
        Object {
          "added": true,
          "line": "            cognitoIdentityId: null,",
          "lineNumber": 198,
        },
        Object {
          "added": true,
          "line": "            cognitoIdentityPoolId: null,",
          "lineNumber": 199,
        },
        Object {
          "added": true,
          "line": "            principalOrgId: null,",
          "lineNumber": 200,
        },
        Object {
          "added": true,
          "line": "            sourceIp: actualEvent.requestContext.identity.sourceIp,",
          "lineNumber": 201,
        },
        Object {
          "added": true,
          "line": "            user: null,",
          "lineNumber": 202,
        },
        Object {
          "added": true,
          "line": "            userAgent: null,",
          "lineNumber": 203,
        },
        Object {
          "added": true,
          "line": "            userArn: null,",
          "lineNumber": 204,
        },
        Object {
          "added": true,
          "line": "          },",
          "lineNumber": 205,
        },
        Object {
          "added": true,
          "line": "          messageDirection: 'IN',",
          "lineNumber": 206,
        },
        Object {
          "added": true,
          "line": "          messageId: actualEvent.requestContext.messageId,",
          "lineNumber": 207,
        },
        Object {
          "added": true,
          "line": "          requestId: actualEvent.requestContext.requestId,",
          "lineNumber": 208,
        },
        Object {
          "added": true,
          "line": "          requestTime: actualEvent.requestContext.requestTime,",
          "lineNumber": 209,
        },
        Object {
          "added": true,
          "line": "          requestTimeEpoch: actualEvent.requestContext.requestTimeEpoch,",
          "lineNumber": 210,
        },
        Object {
          "added": true,
          "line": "          routeKey: action,",
          "lineNumber": 211,
        },
        Object {
          "added": true,
          "line": "          stage: actualEvent.requestContext.stage,",
          "lineNumber": 212,
        },
        Object {
          "added": true,
          "line": "        },",
          "lineNumber": 213,
        },
        Object {
          "added": true,
          "line": "      };",
          "lineNumber": 214,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 215,
        },
        Object {
          "added": true,
          "line": "      return expected;",
          "lineNumber": 216,
        },
        Object {
          "added": true,
          "line": "    };",
          "lineNumber": 217,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 218,
        },
        Object {
          "added": true,
          "line": "    const createExpectedContext = actualContext => {",
          "lineNumber": 219,
        },
        Object {
          "added": true,
          "line": "      const expected = {",
          "lineNumber": 220,
        },
        Object {
          "added": true,
          "line": "        awsRequestId: actualContext.awsRequestId,",
          "lineNumber": 221,
        },
        Object {
          "added": true,
          "line": "        callbackWaitsForEmptyEventLoop: true,",
          "lineNumber": 222,
        },
        Object {
          "added": true,
          "line": "        functionName: actualContext.functionName,",
          "lineNumber": 223,
        },
        Object {
          "added": true,
          "line": "        functionVersion: '$LATEST',",
          "lineNumber": 224,
        },
        Object {
          "added": true,
          "line": "        invokedFunctionArn: actualContext.invokedFunctionArn,",
          "lineNumber": 225,
        },
        Object {
          "added": true,
          "line": "        invokeid: actualContext.invokeid,",
          "lineNumber": 226,
        },
        Object {
          "added": true,
          "line": "        logGroupName: actualContext.logGroupName,",
          "lineNumber": 227,
        },
        Object {
          "added": true,
          "line": "        logStreamName: actualContext.logStreamName,",
          "lineNumber": 228,
        },
        Object {
          "added": true,
          "line": "        memoryLimitInMB: actualContext.memoryLimitInMB,",
          "lineNumber": 229,
        },
        Object {
          "added": true,
          "line": "      };",
          "lineNumber": 230,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 231,
        },
        Object {
          "added": true,
          "line": "      return expected;",
          "lineNumber": 232,
        },
        Object {
          "added": true,
          "line": "    };",
          "lineNumber": 233,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 234,
        },
        Object {
          "added": true,
          "line": "    const createExpectedConnectHeaders = actualHeaders => {",
          "lineNumber": 235,
        },
        Object {
          "added": true,
          "line": "      const url = new URL(endpoint);",
          "lineNumber": 236,
        },
        Object {
          "added": true,
          "line": "      const expected = {",
          "lineNumber": 237,
        },
        Object {
          "added": true,
          "line": "        Host: url.hostname,",
          "lineNumber": 238,
        },
        Object {
          "added": true,
          "line": "        'Sec-WebSocket-Extensions': actualHeaders['Sec-WebSocket-Extensions'],",
          "lineNumber": 239,
        },
        Object {
          "added": true,
          "line": "        'Sec-WebSocket-Key': actualHeaders['Sec-WebSocket-Key'],",
          "lineNumber": 240,
        },
        Object {
          "added": true,
          "line": "        'Sec-WebSocket-Version': actualHeaders['Sec-WebSocket-Version'],",
          "lineNumber": 241,
        },
        Object {
          "added": true,
          "line": "        'X-Amzn-Trace-Id': actualHeaders['X-Amzn-Trace-Id'],",
          "lineNumber": 242,
        },
        Object {
          "added": true,
          "line": "        'X-Forwarded-For': actualHeaders['X-Forwarded-For'],",
          "lineNumber": 243,
        },
        Object {
          "added": true,
          "line": "        'X-Forwarded-Port': \`\${url.port || 443}\`,",
          "lineNumber": 244,
        },
        Object {
          "added": true,
          "line": "        'X-Forwarded-Proto': \`\${url.protocol.replace('ws', 'http').replace('wss', 'https').replace(':', '')}\`,",
          "lineNumber": 245,
        },
        Object {
          "added": true,
          "line": "      };",
          "lineNumber": 246,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 247,
        },
        Object {
          "added": true,
          "line": "      return expected;",
          "lineNumber": 248,
        },
        Object {
          "added": true,
          "line": "    };",
          "lineNumber": 249,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 250,
        },
        Object {
          "added": true,
          "line": "    const createExpectedDisconnectHeaders = () => {",
          "lineNumber": 251,
        },
        Object {
          "added": true,
          "line": "      const url = new URL(endpoint);",
          "lineNumber": 252,
        },
        Object {
          "added": true,
          "line": "      const expected = {",
          "lineNumber": 253,
        },
        Object {
          "added": true,
          "line": "        Host: url.hostname,",
          "lineNumber": 254,
        },
        Object {
          "added": true,
          "line": "        'x-api-key': '',",
          "lineNumber": 255,
        },
        Object {
          "added": true,
          "line": "        'x-restapi': '',",
          "lineNumber": 256,
        },
        Object {
          "added": true,
          "line": "      };",
          "lineNumber": 257,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 258,
        },
        Object {
          "added": true,
          "line": "      return expected;",
          "lineNumber": 259,
        },
        Object {
          "added": true,
          "line": "    };",
          "lineNumber": 260,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 261,
        },
        Object {
          "added": true,
          "line": "    const createExpectedConnectMultiValueHeaders = actualHeaders => {",
          "lineNumber": 262,
        },
        Object {
          "added": true,
          "line": "      const expected = createExpectedConnectHeaders(actualHeaders);",
          "lineNumber": 263,
        },
        Object {
          "added": true,
          "line": "      Object.keys(expected).forEach(key => {",
          "lineNumber": 264,
        },
        Object {
          "added": true,
          "line": "        expected[key] = [expected[key]];",
          "lineNumber": 265,
        },
        Object {
          "added": true,
          "line": "      });",
          "lineNumber": 266,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 267,
        },
        Object {
          "added": true,
          "line": "      return expected;",
          "lineNumber": 268,
        },
        Object {
          "added": true,
          "line": "    };",
          "lineNumber": 269,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 270,
        },
        Object {
          "added": true,
          "line": "    const createExpectedDisconnectMultiValueHeaders = actualHeaders => {",
          "lineNumber": 271,
        },
        Object {
          "added": true,
          "line": "      const expected = createExpectedDisconnectHeaders(actualHeaders);",
          "lineNumber": 272,
        },
        Object {
          "added": true,
          "line": "      Object.keys(expected).forEach(key => {",
          "lineNumber": 273,
        },
        Object {
          "added": true,
          "line": "        expected[key] = [expected[key]];",
          "lineNumber": 274,
        },
        Object {
          "added": true,
          "line": "      });",
          "lineNumber": 275,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 276,
        },
        Object {
          "added": true,
          "line": "      return expected;",
          "lineNumber": 277,
        },
        Object {
          "added": true,
          "line": "    };",
          "lineNumber": 278,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 279,
        },
        Object {
          "added": true,
          "line": "    it('should receive correct call info', async () => {",
          "lineNumber": 280,
        },
        Object {
          "added": true,
          "line": "      const ws = await createWebSocket();",
          "lineNumber": 281,
        },
        Object {
          "added": true,
          "line": "      await ws.send(JSON.stringify({ action:'registerListener' }));",
          "lineNumber": 282,
        },
        Object {
          "added": true,
          "line": "      await ws.receive1();",
          "lineNumber": 283,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 284,
        },
        Object {
          "added": true,
          "line": "      // connect",
          "lineNumber": 285,
        },
        Object {
          "added": true,
          "line": "      const c = await createClient();",
          "lineNumber": 286,
        },
        Object {
          "added": true,
          "line": "      const connect = JSON.parse(await ws.receive1());",
          "lineNumber": 287,
        },
        Object {
          "added": true,
          "line": "      let now = Date.now();",
          "lineNumber": 288,
        },
        Object {
          "added": true,
          "line": "      let expectedCallInfo = { id:c.id, event:{ headers:createExpectedConnectHeaders(connect.info.event.headers), multiValueHeaders:createExpectedConnectMultiValueHeaders(connect.info.event.headers), ...createExpectedEvent(c.id, '$connect', 'CONNECT', connect.info.event) }, context:createExpectedContext(connect.info.context) };",
          "lineNumber": 289,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 290,
        },
        Object {
          "added": true,
          "line": "      expect(connect).to.deep.equal({ action:'update', event:'connect', info:expectedCallInfo });",
          "lineNumber": 291,
        },
        Object {
          "added": true,
          "line": "      expect(connect.info.event.requestContext.requestTimeEpoch).to.be.within(connect.info.event.requestContext.connectedAt - 10, connect.info.event.requestContext.requestTimeEpoch + 10);",
          "lineNumber": 292,
        },
        Object {
          "added": true,
          "line": "      expect(connect.info.event.requestContext.connectedAt).to.be.within(now - timeout, now);",
          "lineNumber": 293,
        },
        Object {
          "added": true,
          "line": "      expect(connect.info.event.requestContext.requestTimeEpoch).to.be.within(now - timeout, now);",
          "lineNumber": 294,
        },
        Object {
          "added": true,
          "line": "      expect(moment.utc(connect.info.event.requestContext.requestTime, 'D/MMM/YYYY:H:m:s Z').toDate().getTime()).to.be.within(now - timeout, now);",
          "lineNumber": 295,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 296,
        },
        Object {
          "added": true,
          "line": "      if (endpoint.startsWith('ws://locahost')) {",
          "lineNumber": 297,
        },
        Object {
          "added": true,
          "line": "        expect(connect.info.event.apiGatewayUrl).to.equal(endpoint.replace('ws://', 'http://').replace('wss://', 'https://'));",
          "lineNumber": 298,
        },
        Object {
          "added": true,
          "line": "        expect(connect.info.event.headers['X-Forwarded-For']).to.be.equal('127.0.0.1');",
          "lineNumber": 299,
        },
        Object {
          "added": true,
          "line": "      }",
          "lineNumber": 300,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 301,
        },
        Object {
          "added": true,
          "line": "      // getCallInfo",
          "lineNumber": 302,
        },
        Object {
          "added": true,
          "line": "      c.ws.send(JSON.stringify({ action:'getCallInfo' }));",
          "lineNumber": 303,
        },
        Object {
          "added": true,
          "line": "      const callInfo = JSON.parse(await c.ws.receive1());",
          "lineNumber": 304,
        },
        Object {
          "added": true,
          "line": "      now = Date.now();",
          "lineNumber": 305,
        },
        Object {
          "added": true,
          "line": "      expectedCallInfo = { event:{ body: '{\\"action\\":\\"getCallInfo\\"}', ...createExpectedEvent(c.id, 'getCallInfo', 'MESSAGE', callInfo.info.event) }, context:createExpectedContext(callInfo.info.context) };",
          "lineNumber": 306,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 307,
        },
        Object {
          "added": true,
          "line": "      expect(callInfo).to.deep.equal({ action:'update', event:'call-info', info:expectedCallInfo });",
          "lineNumber": 308,
        },
        Object {
          "added": true,
          "line": "      expect(callInfo.info.event.requestContext.connectedAt).to.be.lt(callInfo.info.event.requestContext.requestTimeEpoch);",
          "lineNumber": 309,
        },
        Object {
          "added": true,
          "line": "      expect(callInfo.info.event.requestContext.connectedAt).to.be.within(now - timeout, now);",
          "lineNumber": 310,
        },
        Object {
          "added": true,
          "line": "      expect(callInfo.info.event.requestContext.requestTimeEpoch).to.be.within(now - timeout, now);",
          "lineNumber": 311,
        },
        Object {
          "added": true,
          "line": "      expect(moment.utc(callInfo.info.event.requestContext.requestTime, 'D/MMM/YYYY:H:m:s Z').toDate().getTime()).to.be.within(now - timeout, now);",
          "lineNumber": 312,
        },
        Object {
          "added": true,
          "line": "      if (endpoint.startsWith('ws://locahost')) expect(callInfo.info.event.apiGatewayUrl).to.equal(endpoint.replace('ws://', 'http://').replace('wss://', 'https://'));",
          "lineNumber": 313,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 314,
        },
        Object {
          "added": true,
          "line": "      // disconnect",
          "lineNumber": 315,
        },
        Object {
          "added": true,
          "line": "      c.ws.close();",
          "lineNumber": 316,
        },
        Object {
          "added": true,
          "line": "      const disconnect = JSON.parse(await ws.receive1());",
          "lineNumber": 317,
        },
        Object {
          "added": true,
          "line": "      now = Date.now();",
          "lineNumber": 318,
        },
        Object {
          "added": true,
          "line": "      expectedCallInfo = { id:c.id, event:{ headers:createExpectedDisconnectHeaders(disconnect.info.event.headers), multiValueHeaders:createExpectedDisconnectMultiValueHeaders(disconnect.info.event.headers), ...createExpectedEvent(c.id, '$disconnect', 'DISCONNECT', disconnect.info.event) }, context:createExpectedContext(disconnect.info.context) };",
          "lineNumber": 319,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 320,
        },
        Object {
          "added": true,
          "line": "      expect(disconnect).to.deep.equal({ action:'update', event:'disconnect', info:expectedCallInfo });",
          "lineNumber": 321,
        },
        Object {
          "added": true,
          "line": "    }).timeout(timeout);",
          "lineNumber": 322,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 323,
        },
        Object {
          "added": true,
          "line": "    it('should be able to parse query string', async () => {",
          "lineNumber": 324,
        },
        Object {
          "added": true,
          "line": "      const now = \`\${Date.now()}\`;",
          "lineNumber": 325,
        },
        Object {
          "added": true,
          "line": "      const ws = await createWebSocket();",
          "lineNumber": 326,
        },
        Object {
          "added": true,
          "line": "      await ws.send(JSON.stringify({ action:'registerListener' }));",
          "lineNumber": 327,
        },
        Object {
          "added": true,
          "line": "      await ws.receive1();",
          "lineNumber": 328,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 329,
        },
        Object {
          "added": true,
          "line": "      await createClient();",
          "lineNumber": 330,
        },
        Object {
          "added": true,
          "line": "      await createClient(\`now=\${now}&before=123456789\`);",
          "lineNumber": 331,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 332,
        },
        Object {
          "added": true,
          "line": "      expect(JSON.parse(await ws.receive1()).info.event.queryStringParameters).to.be.undefined;",
          "lineNumber": 333,
        },
        Object {
          "added": true,
          "line": "      expect(JSON.parse(await ws.receive1()).info.event.queryStringParameters).to.deep.equal({ now, before:'123456789' });",
          "lineNumber": 334,
        },
        Object {
          "added": true,
          "line": "    }).timeout(timeout);",
          "lineNumber": 335,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 336,
        },
        Object {
          "added": true,
          "line": "    it('should be able to receive messages via REST API', async () => {",
          "lineNumber": 337,
        },
        Object {
          "added": true,
          "line": "      await createClient();",
          "lineNumber": 338,
        },
        Object {
          "added": true,
          "line": "      const c2 = await createClient();",
          "lineNumber": 339,
        },
        Object {
          "added": true,
          "line": "      const url = new URL(endpoint);",
          "lineNumber": 340,
        },
        Object {
          "added": true,
          "line": "      const signature = { service: 'execute-api', host:url.host, path:\`\${url.pathname}/@connections/\${c2.id}\`, method: 'POST', body:'Hello World!', headers:{ 'Content-Type':'text/plain'/* 'application/text' */ } };",
          "lineNumber": 341,
        },
        Object {
          "added": true,
          "line": "      aws4.sign(signature, { accessKeyId: cred.accessKeyId, secretAccessKey: cred.secretAccessKey });",
          "lineNumber": 342,
        },
        Object {
          "added": true,
          "line": "      const res = await req.post(signature.path.replace(url.pathname, '')).set('X-Amz-Date', signature.headers['X-Amz-Date']).set('Authorization', signature.headers.Authorization).set('Content-Type', signature.headers['Content-Type'])",
          "lineNumber": 343,
        },
        Object {
          "added": true,
          "line": ".send('Hello World!');",
          "lineNumber": 344,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 345,
        },
        Object {
          "added": true,
          "line": "      expect(res).to.have.status(200);",
          "lineNumber": 346,
        },
        Object {
          "added": true,
          "line": "      expect(await c2.ws.receive1()).to.equal('Hello World!');",
          "lineNumber": 347,
        },
        Object {
          "added": true,
          "line": "    }).timeout(timeout);",
          "lineNumber": 348,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 349,
        },
        Object {
          "added": true,
          "line": "    it('should receive error code when sending to non existing client via REST API', async () => {",
          "lineNumber": 350,
        },
        Object {
          "added": true,
          "line": "      const c = 'aJz0Md6VoAMCIbQ=';",
          "lineNumber": 351,
        },
        Object {
          "added": true,
          "line": "      const url = new URL(endpoint);",
          "lineNumber": 352,
        },
        Object {
          "added": true,
          "line": "      const signature = { service: 'execute-api', host:url.host, path:\`\${url.pathname}/@connections/\${c}\`, method: 'POST', body:'Hello World!', headers:{ 'Content-Type':'text/plain'/* 'application/text' */ } };",
          "lineNumber": 353,
        },
        Object {
          "added": true,
          "line": "      aws4.sign(signature, { accessKeyId: cred.accessKeyId, secretAccessKey: cred.secretAccessKey });",
          "lineNumber": 354,
        },
        Object {
          "added": true,
          "line": "      const res = await req.post(signature.path.replace(url.pathname, '')).set('X-Amz-Date', signature.headers['X-Amz-Date']).set('Authorization', signature.headers.Authorization).set('Content-Type', signature.headers['Content-Type'])",
          "lineNumber": 355,
        },
        Object {
          "added": true,
          "line": ".send('Hello World!');",
          "lineNumber": 356,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 357,
        },
        Object {
          "added": true,
          "line": "      expect(res).to.have.status(410);",
          "lineNumber": 358,
        },
        Object {
          "added": true,
          "line": "    }).timeout(timeout);",
          "lineNumber": 359,
        },
        Object {
          "added": true,
          "line": "  });",
          "lineNumber": 360,
        },
        Object {
          "added": true,
          "line": "});",
          "lineNumber": 361,
        },
      ],
    },
    Object {
      "added": true,
      "afterName": "manual_test_websocket/main/test/support/WebSocketTester.js",
      "beforeName": "manual_test_websocket/main/test/support/WebSocketTester.js",
      "deleted": false,
      "modifiedLines": Array [
        Object {
          "added": true,
          "line": "/* eslint-disable import/no-extraneous-dependencies */",
          "lineNumber": 2,
        },
        Object {
          "added": true,
          "line": "const WebSocket = require('ws');",
          "lineNumber": 3,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 4,
        },
        Object {
          "added": true,
          "line": "class WebSocketTester {",
          "lineNumber": 5,
        },
        Object {
          "added": true,
          "line": "  constructor() {",
          "lineNumber": 6,
        },
        Object {
          "added": true,
          "line": "    this.messages = []; this.receivers = [];",
          "lineNumber": 7,
        },
        Object {
          "added": true,
          "line": "  }",
          "lineNumber": 8,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 9,
        },
        Object {
          "added": true,
          "line": "  open(url) {",
          "lineNumber": 10,
        },
        Object {
          "added": true,
          "line": "    if (this.ws != null) return;",
          "lineNumber": 11,
        },
        Object {
          "added": true,
          "line": "    const ws = this.ws = new WebSocket(url);",
          "lineNumber": 12,
        },
        Object {
          "added": true,
          "line": "    ws.on('message', message => {",
          "lineNumber": 13,
        },
        Object {
          "added": true,
          "line": "      // console.log('Received: '+message);",
          "lineNumber": 14,
        },
        Object {
          "added": true,
          "line": "      if (this.receivers.length > 0) this.receivers.shift()(message);",
          "lineNumber": 15,
        },
        Object {
          "added": true,
          "line": "      else this.messages.push(message);",
          "lineNumber": 16,
        },
        Object {
          "added": true,
          "line": "    });",
          "lineNumber": 17,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 18,
        },
        Object {
          "added": true,
          "line": "    return new Promise(resolve => {",
          "lineNumber": 19,
        },
        Object {
          "added": true,
          "line": "      ws.on('open', () => {",
          "lineNumber": 20,
        },
        Object {
          "added": true,
          "line": "        resolve(true);",
          "lineNumber": 21,
        },
        Object {
          "added": true,
          "line": "      });",
          "lineNumber": 22,
        },
        Object {
          "added": true,
          "line": "    });",
          "lineNumber": 23,
        },
        Object {
          "added": true,
          "line": "  }",
          "lineNumber": 24,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 25,
        },
        Object {
          "added": true,
          "line": "  send(data) {",
          "lineNumber": 26,
        },
        Object {
          "added": true,
          "line": "    this.ws.send(data);",
          "lineNumber": 27,
        },
        Object {
          "added": true,
          "line": "  }",
          "lineNumber": 28,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 29,
        },
        Object {
          "added": true,
          "line": "  receive1() {",
          "lineNumber": 30,
        },
        Object {
          "added": true,
          "line": "    return new Promise(resolve => {",
          "lineNumber": 31,
        },
        Object {
          "added": true,
          "line": "      if (this.messages.length > 0) resolve(this.messages.shift());",
          "lineNumber": 32,
        },
        Object {
          "added": true,
          "line": "      else this.receivers.push(resolve);",
          "lineNumber": 33,
        },
        Object {
          "added": true,
          "line": "    });",
          "lineNumber": 34,
        },
        Object {
          "added": true,
          "line": "  }",
          "lineNumber": 35,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 36,
        },
        Object {
          "added": true,
          "line": "  receive(n) {",
          "lineNumber": 37,
        },
        Object {
          "added": true,
          "line": "    return new Promise(resolve => {",
          "lineNumber": 38,
        },
        Object {
          "added": true,
          "line": "      const messages = [];",
          "lineNumber": 39,
        },
        Object {
          "added": true,
          "line": "      for (let i = 0; i < n; i += 1) {",
          "lineNumber": 40,
        },
        Object {
          "added": true,
          "line": "        this.receive1().then(message => {",
          "lineNumber": 41,
        },
        Object {
          "added": true,
          "line": "          messages[i] = message;",
          "lineNumber": 42,
        },
        Object {
          "added": true,
          "line": "          if (i === n - 1) resolve(messages);",
          "lineNumber": 43,
        },
        Object {
          "added": true,
          "line": "        });",
          "lineNumber": 44,
        },
        Object {
          "added": true,
          "line": "      }",
          "lineNumber": 45,
        },
        Object {
          "added": true,
          "line": "    });",
          "lineNumber": 46,
        },
        Object {
          "added": true,
          "line": "  }",
          "lineNumber": 47,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 48,
        },
        Object {
          "added": true,
          "line": "  skip() {",
          "lineNumber": 49,
        },
        Object {
          "added": true,
          "line": "    if (this.messages.length > 0) this.messages.shift();",
          "lineNumber": 50,
        },
        Object {
          "added": true,
          "line": "    else this.receivers.push(() => {});",
          "lineNumber": 51,
        },
        Object {
          "added": true,
          "line": "  }",
          "lineNumber": 52,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 53,
        },
        Object {
          "added": true,
          "line": "  countUnrecived() {",
          "lineNumber": 54,
        },
        Object {
          "added": true,
          "line": "    return this.messages.length;",
          "lineNumber": 55,
        },
        Object {
          "added": true,
          "line": "  }",
          "lineNumber": 56,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 57,
        },
        Object {
          "added": true,
          "line": "  close() {",
          "lineNumber": 58,
        },
        Object {
          "added": true,
          "line": "    if (this.ws != null) this.ws.close();",
          "lineNumber": 59,
        },
        Object {
          "added": true,
          "line": "  }",
          "lineNumber": 60,
        },
        Object {
          "added": true,
          "line": "}",
          "lineNumber": 61,
        },
        Object {
          "added": true,
          "line": "",
          "lineNumber": 62,
        },
        Object {
          "added": true,
          "line": "module.exports = WebSocketTester;",
          "lineNumber": 63,
        },
      ],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/manual_test_websocket_RouteSelection/handler.js",
      "beforeName": "manual_test_websocket/manual_test_websocket_RouteSelection/handler.js",
      "deleted": true,
      "modifiedLines": Array [
        Object {
          "added": false,
          "line": "'use strict';",
          "lineNumber": 2,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 3,
        },
        Object {
          "added": false,
          "line": "const AWS = require('aws-sdk');",
          "lineNumber": 4,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 5,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 6,
        },
        Object {
          "added": false,
          "line": "const successfullResponse = {",
          "lineNumber": 7,
        },
        Object {
          "added": false,
          "line": "  statusCode: 200,",
          "lineNumber": 8,
        },
        Object {
          "added": false,
          "line": "  body: 'Request is OK.'",
          "lineNumber": 9,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 10,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 11,
        },
        Object {
          "added": false,
          "line": "const errorResponse = {",
          "lineNumber": 12,
        },
        Object {
          "added": false,
          "line": "  statusCode: 400,",
          "lineNumber": 13,
        },
        Object {
          "added": false,
          "line": "  body: 'Request is not OK.'",
          "lineNumber": 14,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 15,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 16,
        },
        Object {
          "added": false,
          "line": "module.exports.echo = async (event, context) => {",
          "lineNumber": 17,
        },
        Object {
          "added": false,
          "line": "  const action = JSON.parse(event.body);",
          "lineNumber": 18,
        },
        Object {
          "added": false,
          "line": "  ",
          "lineNumber": 19,
        },
        Object {
          "added": false,
          "line": "  await sendToClient(action.message, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context));",
          "lineNumber": 20,
        },
        Object {
          "added": false,
          "line": "  return successfullResponse; ",
          "lineNumber": 21,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 22,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 23,
        },
        Object {
          "added": false,
          "line": "const newAWSApiGatewayManagementApi=(event, context)=>{",
          "lineNumber": 24,
        },
        Object {
          "added": false,
          "line": "  let endpoint=event.apiGatewayUrl;",
          "lineNumber": 25,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 26,
        },
        Object {
          "added": false,
          "line": "  if (!endpoint) endpoint = event.requestContext.domainName+'/'+event.requestContext.stage;",
          "lineNumber": 27,
        },
        Object {
          "added": false,
          "line": "  const apiVersion='2018-11-29';",
          "lineNumber": 28,
        },
        Object {
          "added": false,
          "line": "  return new AWS.ApiGatewayManagementApi({ apiVersion, endpoint });",
          "lineNumber": 29,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 30,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 31,
        },
        Object {
          "added": false,
          "line": "const sendToClient = (data, connectionId, apigwManagementApi) => {",
          "lineNumber": 32,
        },
        Object {
          "added": false,
          "line": "  // console.log(\`sendToClient:\${connectionId}\`);",
          "lineNumber": 33,
        },
        Object {
          "added": false,
          "line": "  let sendee=data;",
          "lineNumber": 34,
        },
        Object {
          "added": false,
          "line": "  if ('object'==typeof data) sendee=JSON.stringify(data);",
          "lineNumber": 35,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 36,
        },
        Object {
          "added": false,
          "line": "  return apigwManagementApi.postToConnection({ConnectionId: connectionId, Data: sendee}).promise();",
          "lineNumber": 37,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 38,
        },
      ],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/manual_test_websocket_RouteSelection/test/e2e/ws.e2e.js",
      "beforeName": "manual_test_websocket/manual_test_websocket_RouteSelection/test/e2e/ws.e2e.js",
      "deleted": true,
      "modifiedLines": Array [
        Object {
          "added": false,
          "line": "const chai = require('chai');",
          "lineNumber": 2,
        },
        Object {
          "added": false,
          "line": "const expect = chai.expect;",
          "lineNumber": 3,
        },
        Object {
          "added": false,
          "line": "const endpoint = process.env.npm_config_endpoint||'ws://localhost:3005';",
          "lineNumber": 4,
        },
        Object {
          "added": false,
          "line": "const timeout = process.env.npm_config_timeout?parseInt(process.env.npm_config_timeout):1000;",
          "lineNumber": 5,
        },
        Object {
          "added": false,
          "line": "const WebSocketTester=require('../support/WebSocketTester');",
          "lineNumber": 6,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 7,
        },
        Object {
          "added": false,
          "line": "describe('serverless', ()=>{",
          "lineNumber": 8,
        },
        Object {
          "added": false,
          "line": "  describe('with WebSocket support', ()=>{",
          "lineNumber": 9,
        },
        Object {
          "added": false,
          "line": "    let clients=[]; let req=null; let cred=null;",
          "lineNumber": 10,
        },
        Object {
          "added": false,
          "line": "    const createWebSocket=async (qs)=>{",
          "lineNumber": 11,
        },
        Object {
          "added": false,
          "line": "      const ws=new WebSocketTester();",
          "lineNumber": 12,
        },
        Object {
          "added": false,
          "line": "      let url=endpoint;",
          "lineNumber": 13,
        },
        Object {
          "added": false,
          "line": "      if (qs) url=\`\${endpoint}?\${qs}\`;",
          "lineNumber": 14,
        },
        Object {
          "added": false,
          "line": "      await ws.open(url);",
          "lineNumber": 15,
        },
        Object {
          "added": false,
          "line": "      clients.push(ws);",
          "lineNumber": 16,
        },
        Object {
          "added": false,
          "line": "      return ws;",
          "lineNumber": 17,
        },
        Object {
          "added": false,
          "line": "    };",
          "lineNumber": 18,
        },
        Object {
          "added": false,
          "line": "    const createClient=async (qs)=>{",
          "lineNumber": 19,
        },
        Object {
          "added": false,
          "line": "      const ws=await createWebSocket(qs);",
          "lineNumber": 20,
        },
        Object {
          "added": false,
          "line": "      ws.send(JSON.stringify({action:'getClientInfo'}));",
          "lineNumber": 21,
        },
        Object {
          "added": false,
          "line": "      const json=await ws.receive1();",
          "lineNumber": 22,
        },
        Object {
          "added": false,
          "line": "      const id=JSON.parse(json).info.id;",
          "lineNumber": 23,
        },
        Object {
          "added": false,
          "line": "      return {ws, id};",
          "lineNumber": 24,
        },
        Object {
          "added": false,
          "line": "    };",
          "lineNumber": 25,
        },
        Object {
          "added": false,
          "line": "    ",
          "lineNumber": 26,
        },
        Object {
          "added": false,
          "line": "    beforeEach(()=>{",
          "lineNumber": 27,
        },
        Object {
          "added": false,
          "line": "      clients=[];",
          "lineNumber": 28,
        },
        Object {
          "added": false,
          "line": "    });",
          "lineNumber": 29,
        },
        Object {
          "added": false,
          "line": "    afterEach(async ()=>{",
          "lineNumber": 30,
        },
        Object {
          "added": false,
          "line": "      await Promise.all(clients.map(async (ws, i)=>{",
          "lineNumber": 31,
        },
        Object {
          "added": false,
          "line": "        const n=ws.countUnrecived();",
          "lineNumber": 32,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 33,
        },
        Object {
          "added": false,
          "line": "        if (n>0) {",
          "lineNumber": 34,
        },
        Object {
          "added": false,
          "line": "          console.log(\`unreceived:[i=\${i}]\`);",
          "lineNumber": 35,
        },
        Object {
          "added": false,
          "line": "          (await ws.receive(n)).forEach(m=>console.log(m));",
          "lineNumber": 36,
        },
        Object {
          "added": false,
          "line": "        }",
          "lineNumber": 37,
        },
        Object {
          "added": false,
          "line": "        expect(n).to.equal(0);",
          "lineNumber": 38,
        },
        Object {
          "added": false,
          "line": "        ws.close();",
          "lineNumber": 39,
        },
        Object {
          "added": false,
          "line": "      }));",
          "lineNumber": 40,
        },
        Object {
          "added": false,
          "line": "      clients=[];",
          "lineNumber": 41,
        },
        Object {
          "added": false,
          "line": "    });",
          "lineNumber": 42,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 43,
        },
        Object {
          "added": false,
          "line": "    it(\`should call action 'echo' handler located at service.do\`, async ()=>{",
          "lineNumber": 44,
        },
        Object {
          "added": false,
          "line": "      const ws=await createWebSocket();",
          "lineNumber": 45,
        },
        Object {
          "added": false,
          "line": "      const now=\\"\\"+Date.now();",
          "lineNumber": 46,
        },
        Object {
          "added": false,
          "line": "      const payload=JSON.stringify({service:{do:'echo'}, message:now});",
          "lineNumber": 47,
        },
        Object {
          "added": false,
          "line": "      ws.send(payload);",
          "lineNumber": 48,
        },
        Object {
          "added": false,
          "line": "      expect(await ws.receive1()).to.equal(\`\${now}\`);",
          "lineNumber": 49,
        },
        Object {
          "added": false,
          "line": "    }).timeout(timeout);",
          "lineNumber": 50,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 51,
        },
        Object {
          "added": false,
          "line": "    ",
          "lineNumber": 52,
        },
        Object {
          "added": false,
          "line": "  });",
          "lineNumber": 53,
        },
        Object {
          "added": false,
          "line": "});",
          "lineNumber": 54,
        },
      ],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/manual_test_websocket_RouteSelection/test/support/WebSocketTester.js",
      "beforeName": "manual_test_websocket/manual_test_websocket_RouteSelection/test/support/WebSocketTester.js",
      "deleted": true,
      "modifiedLines": Array [
        Object {
          "added": false,
          "line": "'use strict';",
          "lineNumber": 2,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 3,
        },
        Object {
          "added": false,
          "line": "const WebSocket = require('ws');",
          "lineNumber": 4,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 5,
        },
        Object {
          "added": false,
          "line": "class WebSocketTester {",
          "lineNumber": 6,
        },
        Object {
          "added": false,
          "line": "  constructor() {",
          "lineNumber": 7,
        },
        Object {
          "added": false,
          "line": "    this.messages=[]; this.receivers=[];",
          "lineNumber": 8,
        },
        Object {
          "added": false,
          "line": "  }",
          "lineNumber": 9,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 10,
        },
        Object {
          "added": false,
          "line": "  open(url) {",
          "lineNumber": 11,
        },
        Object {
          "added": false,
          "line": "    if (null!=this.ws) return;",
          "lineNumber": 12,
        },
        Object {
          "added": false,
          "line": "    const ws=this.ws=new WebSocket(url);",
          "lineNumber": 13,
        },
        Object {
          "added": false,
          "line": "    ws.on('message', (message)=>{",
          "lineNumber": 14,
        },
        Object {
          "added": false,
          "line": "      // console.log('Received: '+message);",
          "lineNumber": 15,
        },
        Object {
          "added": false,
          "line": "      if (0<this.receivers.length) this.receivers.shift()(message);",
          "lineNumber": 16,
        },
        Object {
          "added": false,
          "line": "      else this.messages.push(message);",
          "lineNumber": 17,
        },
        Object {
          "added": false,
          "line": "    });",
          "lineNumber": 18,
        },
        Object {
          "added": false,
          "line": "    return new Promise((resolve/*, reject*/)=> {",
          "lineNumber": 19,
        },
        Object {
          "added": false,
          "line": "      ws.on('open', ()=>{",
          "lineNumber": 20,
        },
        Object {
          "added": false,
          "line": "        resolve(true);",
          "lineNumber": 21,
        },
        Object {
          "added": false,
          "line": "      });",
          "lineNumber": 22,
        },
        Object {
          "added": false,
          "line": "    });",
          "lineNumber": 23,
        },
        Object {
          "added": false,
          "line": "  }",
          "lineNumber": 24,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 25,
        },
        Object {
          "added": false,
          "line": "  send(data) {",
          "lineNumber": 26,
        },
        Object {
          "added": false,
          "line": "    this.ws.send(data);",
          "lineNumber": 27,
        },
        Object {
          "added": false,
          "line": "  }",
          "lineNumber": 28,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 29,
        },
        Object {
          "added": false,
          "line": "  receive1() {",
          "lineNumber": 30,
        },
        Object {
          "added": false,
          "line": "    return new Promise((resolve/*, reject*/)=>{",
          "lineNumber": 31,
        },
        Object {
          "added": false,
          "line": "      if (0<this.messages.length) resolve(this.messages.shift());",
          "lineNumber": 32,
        },
        Object {
          "added": false,
          "line": "      else this.receivers.push(resolve);",
          "lineNumber": 33,
        },
        Object {
          "added": false,
          "line": "    });",
          "lineNumber": 34,
        },
        Object {
          "added": false,
          "line": "  }",
          "lineNumber": 35,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 36,
        },
        Object {
          "added": false,
          "line": "  receive(n) {",
          "lineNumber": 37,
        },
        Object {
          "added": false,
          "line": "    return new Promise((resolve/*, reject*/)=>{",
          "lineNumber": 38,
        },
        Object {
          "added": false,
          "line": "      const messages=[];",
          "lineNumber": 39,
        },
        Object {
          "added": false,
          "line": "      for (let i=0; i<n; i+=1) {",
          "lineNumber": 40,
        },
        Object {
          "added": false,
          "line": "        this.receive1().then((message)=>{",
          "lineNumber": 41,
        },
        Object {
          "added": false,
          "line": "          messages[i]=message;",
          "lineNumber": 42,
        },
        Object {
          "added": false,
          "line": "          if (i===n-1) resolve(messages);",
          "lineNumber": 43,
        },
        Object {
          "added": false,
          "line": "        });",
          "lineNumber": 44,
        },
        Object {
          "added": false,
          "line": "      }",
          "lineNumber": 45,
        },
        Object {
          "added": false,
          "line": "    });",
          "lineNumber": 46,
        },
        Object {
          "added": false,
          "line": "  }",
          "lineNumber": 47,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 48,
        },
        Object {
          "added": false,
          "line": "  skip() {",
          "lineNumber": 49,
        },
        Object {
          "added": false,
          "line": "    if (0<this.messages.length) this.messages.shift();",
          "lineNumber": 50,
        },
        Object {
          "added": false,
          "line": "    else this.receivers.push(()=>{});",
          "lineNumber": 51,
        },
        Object {
          "added": false,
          "line": "  }",
          "lineNumber": 52,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 53,
        },
        Object {
          "added": false,
          "line": "  countUnrecived() {",
          "lineNumber": 54,
        },
        Object {
          "added": false,
          "line": "    return this.messages.length;",
          "lineNumber": 55,
        },
        Object {
          "added": false,
          "line": "  }",
          "lineNumber": 56,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 57,
        },
        Object {
          "added": false,
          "line": "  close() {",
          "lineNumber": 58,
        },
        Object {
          "added": false,
          "line": "    if (null!=this.ws) this.ws.close();",
          "lineNumber": 59,
        },
        Object {
          "added": false,
          "line": "  }",
          "lineNumber": 60,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 61,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 62,
        },
        Object {
          "added": false,
          "line": "module.exports=WebSocketTester;",
          "lineNumber": 63,
        },
      ],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/manual_test_websocket_main/handler.js",
      "beforeName": "manual_test_websocket/manual_test_websocket_main/handler.js",
      "deleted": true,
      "modifiedLines": Array [
        Object {
          "added": false,
          "line": "'use strict';",
          "lineNumber": 2,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 3,
        },
        Object {
          "added": false,
          "line": "const AWS = require('aws-sdk');",
          "lineNumber": 4,
        },
        Object {
          "added": false,
          "line": "const ddb = (()=>{",
          "lineNumber": 5,
        },
        Object {
          "added": false,
          "line": "  if (process.env.IS_OFFLINE) return new AWS.DynamoDB.DocumentClient({region: \\"localhost\\", endpoint: \\"http://localhost:8000\\"});",
          "lineNumber": 6,
        },
        Object {
          "added": false,
          "line": "  return new AWS.DynamoDB.DocumentClient();",
          "lineNumber": 7,
        },
        Object {
          "added": false,
          "line": "})();",
          "lineNumber": 8,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 9,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 10,
        },
        Object {
          "added": false,
          "line": "const successfullResponse = {",
          "lineNumber": 11,
        },
        Object {
          "added": false,
          "line": "  statusCode: 200,",
          "lineNumber": 12,
        },
        Object {
          "added": false,
          "line": "  body: 'Request is OK.'",
          "lineNumber": 13,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 14,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 15,
        },
        Object {
          "added": false,
          "line": "const errorResponse = {",
          "lineNumber": 16,
        },
        Object {
          "added": false,
          "line": "  statusCode: 400,",
          "lineNumber": 17,
        },
        Object {
          "added": false,
          "line": "  body: 'Request is not OK.'",
          "lineNumber": 18,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 19,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 20,
        },
        Object {
          "added": false,
          "line": "// const generatePolicy = function(principalId, effect, resource) {",
          "lineNumber": 21,
        },
        Object {
          "added": false,
          "line": "//   const authResponse = {};",
          "lineNumber": 22,
        },
        Object {
          "added": false,
          "line": "//   authResponse.principalId = principalId;",
          "lineNumber": 23,
        },
        Object {
          "added": false,
          "line": "//   if (effect && resource) {",
          "lineNumber": 24,
        },
        Object {
          "added": false,
          "line": "//       const policyDocument = {};",
          "lineNumber": 25,
        },
        Object {
          "added": false,
          "line": "//       policyDocument.Version = '2012-10-17';",
          "lineNumber": 26,
        },
        Object {
          "added": false,
          "line": "//       policyDocument.Statement = [];",
          "lineNumber": 27,
        },
        Object {
          "added": false,
          "line": "//       const statementOne = {};",
          "lineNumber": 28,
        },
        Object {
          "added": false,
          "line": "//       statementOne.Action = 'execute-api:Invoke';",
          "lineNumber": 29,
        },
        Object {
          "added": false,
          "line": "//       statementOne.Effect = effect;",
          "lineNumber": 30,
        },
        Object {
          "added": false,
          "line": "//       statementOne.Resource = resource;",
          "lineNumber": 31,
        },
        Object {
          "added": false,
          "line": "//       policyDocument.Statement[0] = statementOne;",
          "lineNumber": 32,
        },
        Object {
          "added": false,
          "line": "//       authResponse.policyDocument = policyDocument;",
          "lineNumber": 33,
        },
        Object {
          "added": false,
          "line": "//   }",
          "lineNumber": 34,
        },
        Object {
          "added": false,
          "line": "//   return authResponse;",
          "lineNumber": 35,
        },
        Object {
          "added": false,
          "line": "// };",
          "lineNumber": 36,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 37,
        },
        Object {
          "added": false,
          "line": "// module.exports.http = async (event, context) => {",
          "lineNumber": 38,
        },
        Object {
          "added": false,
          "line": "//   return successfullResponse; ",
          "lineNumber": 39,
        },
        Object {
          "added": false,
          "line": "// };",
          "lineNumber": 40,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 41,
        },
        Object {
          "added": false,
          "line": "module.exports.connect = async (event, context) => {",
          "lineNumber": 42,
        },
        Object {
          "added": false,
          "line": "  // console.log('connect:');",
          "lineNumber": 43,
        },
        Object {
          "added": false,
          "line": "  const listener=await ddb.get({TableName:'listeners', Key:{name:'default'}}).promise();",
          "lineNumber": 44,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 45,
        },
        Object {
          "added": false,
          "line": "  if (listener.Item) {",
          "lineNumber": 46,
        },
        Object {
          "added": false,
          "line": "    const timeout=new Promise((resolve) => setTimeout(resolve,100));",
          "lineNumber": 47,
        },
        Object {
          "added": false,
          "line": "    const send=sendToClient( // sendToClient won't return on AWS when client doesn't exits so we set a timeout",
          "lineNumber": 48,
        },
        Object {
          "added": false,
          "line": "      JSON.stringify({action:'update', event:'connect', info:{id:event.requestContext.connectionId, event:{...event,  apiGatewayUrl:\`\${event.apiGatewayUrl}\`}, context}}), ",
          "lineNumber": 49,
        },
        Object {
          "added": false,
          "line": "      listener.Item.id, ",
          "lineNumber": 50,
        },
        Object {
          "added": false,
          "line": "      newAWSApiGatewayManagementApi(event, context)).catch(()=>{});",
          "lineNumber": 51,
        },
        Object {
          "added": false,
          "line": "    await Promise.race([send, timeout]);",
          "lineNumber": 52,
        },
        Object {
          "added": false,
          "line": "  }",
          "lineNumber": 53,
        },
        Object {
          "added": false,
          "line": "  return successfullResponse; ",
          "lineNumber": 54,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 55,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 56,
        },
        Object {
          "added": false,
          "line": "// module.export.auth = (event, context, callback) => {",
          "lineNumber": 57,
        },
        Object {
          "added": false,
          "line": "//   //console.log('auth:');",
          "lineNumber": 58,
        },
        Object {
          "added": false,
          "line": "//   const token = event.headers[\\"Authorization\\"];",
          "lineNumber": 59,
        },
        Object {
          "added": false,
          "line": "  ",
          "lineNumber": 60,
        },
        Object {
          "added": false,
          "line": "//   if ('deny'===token) callback(null, generatePolicy('user', 'Deny', event.methodArn));",
          "lineNumber": 61,
        },
        Object {
          "added": false,
          "line": "//   else callback(null, generatePolicy('user', 'Allow', event.methodArn));;",
          "lineNumber": 62,
        },
        Object {
          "added": false,
          "line": "// };",
          "lineNumber": 63,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 64,
        },
        Object {
          "added": false,
          "line": "module.exports.disconnect = async (event, context) => {",
          "lineNumber": 65,
        },
        Object {
          "added": false,
          "line": "  const listener=await ddb.get({TableName:'listeners', Key:{name:'default'}}).promise();",
          "lineNumber": 66,
        },
        Object {
          "added": false,
          "line": "  if (listener.Item) await sendToClient(JSON.stringify({action:'update', event:'disconnect', info:{id:event.requestContext.connectionId, event:{...event,  apiGatewayUrl:\`\${event.apiGatewayUrl}\`}, context}}), listener.Item.id, newAWSApiGatewayManagementApi(event, context)).catch(()=>{});",
          "lineNumber": 67,
        },
        Object {
          "added": false,
          "line": "  return successfullResponse; ",
          "lineNumber": 68,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 69,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 70,
        },
        Object {
          "added": false,
          "line": "module.exports.defaultHandler = async (event, context) => {",
          "lineNumber": 71,
        },
        Object {
          "added": false,
          "line": "  await sendToClient(\`Error: No Supported Action in Payload '\${event.body}'\`, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err=>console.log(err));",
          "lineNumber": 72,
        },
        Object {
          "added": false,
          "line": "  return successfullResponse; ",
          "lineNumber": 73,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 74,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 75,
        },
        Object {
          "added": false,
          "line": "module.exports.getClientInfo = async (event, context) => {",
          "lineNumber": 76,
        },
        Object {
          "added": false,
          "line": "  // console.log('getClientInfo:');",
          "lineNumber": 77,
        },
        Object {
          "added": false,
          "line": "  await sendToClient({action:'update', event:'client-info', info:{id:event.requestContext.connectionId}}, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err=>console.log(err));",
          "lineNumber": 78,
        },
        Object {
          "added": false,
          "line": "  return successfullResponse; ",
          "lineNumber": 79,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 80,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 81,
        },
        Object {
          "added": false,
          "line": "module.exports.getCallInfo = async (event, context) => {",
          "lineNumber": 82,
        },
        Object {
          "added": false,
          "line": "  await sendToClient({action:'update', event:'call-info', info:{event:{...event,  apiGatewayUrl:\`\${event.apiGatewayUrl}\`}, context}}, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err=>console.log(err));",
          "lineNumber": 83,
        },
        Object {
          "added": false,
          "line": "  return successfullResponse; ",
          "lineNumber": 84,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 85,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 86,
        },
        Object {
          "added": false,
          "line": "module.exports.makeError = async (event, context) => {",
          "lineNumber": 87,
        },
        Object {
          "added": false,
          "line": "  const obj=null;",
          "lineNumber": 88,
        },
        Object {
          "added": false,
          "line": "  obj.non.non=1;",
          "lineNumber": 89,
        },
        Object {
          "added": false,
          "line": "  return successfullResponse; ",
          "lineNumber": 90,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 91,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 92,
        },
        Object {
          "added": false,
          "line": "module.exports.replyViaCallback = (event, context, callback) => {",
          "lineNumber": 93,
        },
        Object {
          "added": false,
          "line": "  sendToClient({action:'update', event:'reply-via-callback'}, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err=>console.log(err));",
          "lineNumber": 94,
        },
        Object {
          "added": false,
          "line": "  callback();",
          "lineNumber": 95,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 96,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 97,
        },
        Object {
          "added": false,
          "line": "module.exports.replyErrorViaCallback = (event, context, callback) => {",
          "lineNumber": 98,
        },
        Object {
          "added": false,
          "line": "  return callback(\\"error error error\\");",
          "lineNumber": 99,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 100,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 101,
        },
        Object {
          "added": false,
          "line": "module.exports.multiCall1 = async (event, context) => {",
          "lineNumber": 102,
        },
        Object {
          "added": false,
          "line": "  await sendToClient({action:'update', event:'made-call-1'}, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err=>console.log(err));",
          "lineNumber": 103,
        },
        Object {
          "added": false,
          "line": "  return successfullResponse; ",
          "lineNumber": 104,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 105,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 106,
        },
        Object {
          "added": false,
          "line": "module.exports.multiCall2 = async (event, context) => {",
          "lineNumber": 107,
        },
        Object {
          "added": false,
          "line": "  await sendToClient({action:'update', event:'made-call-2'}, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err=>console.log(err));",
          "lineNumber": 108,
        },
        Object {
          "added": false,
          "line": "  return successfullResponse; ",
          "lineNumber": 109,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 110,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 111,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 112,
        },
        Object {
          "added": false,
          "line": "module.exports.send = async (event, context) => {",
          "lineNumber": 113,
        },
        Object {
          "added": false,
          "line": "  const action = JSON.parse(event.body);",
          "lineNumber": 114,
        },
        Object {
          "added": false,
          "line": "  const sents=[];",
          "lineNumber": 115,
        },
        Object {
          "added": false,
          "line": "  action.clients.forEach((connectionId)=>{ ",
          "lineNumber": 116,
        },
        Object {
          "added": false,
          "line": "    const sent=sendToClient(action.data, connectionId, newAWSApiGatewayManagementApi(event, context));",
          "lineNumber": 117,
        },
        Object {
          "added": false,
          "line": "    sents.push(sent);",
          "lineNumber": 118,
        },
        Object {
          "added": false,
          "line": "  });",
          "lineNumber": 119,
        },
        Object {
          "added": false,
          "line": "  const noErr=await Promise.all(sents).then(()=>true).catch(()=>false);",
          "lineNumber": 120,
        },
        Object {
          "added": false,
          "line": "  if (!noErr) await sendToClient('Error: Could not Send all Messages', event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context));",
          "lineNumber": 121,
        },
        Object {
          "added": false,
          "line": "  return successfullResponse; ",
          "lineNumber": 122,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 123,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 124,
        },
        Object {
          "added": false,
          "line": "module.exports.registerListener = async (event, context) => {",
          "lineNumber": 125,
        },
        Object {
          "added": false,
          "line": "  await ddb.put({TableName:'listeners', Item:{name:'default', id:event.requestContext.connectionId}}).promise();",
          "lineNumber": 126,
        },
        Object {
          "added": false,
          "line": "  await sendToClient({action:'update', event:'register-listener', info:{id:event.requestContext.connectionId}}, event.requestContext.connectionId, newAWSApiGatewayManagementApi(event, context)).catch(err=>console.log(err));",
          "lineNumber": 127,
        },
        Object {
          "added": false,
          "line": "  return successfullResponse; ",
          "lineNumber": 128,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 129,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 130,
        },
        Object {
          "added": false,
          "line": "module.exports.deleteListener = async (event, context) => {",
          "lineNumber": 131,
        },
        Object {
          "added": false,
          "line": "  await ddb.delete({TableName:'listeners', Key:{name:'default'}}).promise();",
          "lineNumber": 132,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 133,
        },
        Object {
          "added": false,
          "line": "  return successfullResponse;  ",
          "lineNumber": 134,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 135,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 136,
        },
        Object {
          "added": false,
          "line": "const newAWSApiGatewayManagementApi=(event, context)=>{",
          "lineNumber": 137,
        },
        Object {
          "added": false,
          "line": "  let endpoint=event.apiGatewayUrl;",
          "lineNumber": 138,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 139,
        },
        Object {
          "added": false,
          "line": "  if (!endpoint) endpoint = event.requestContext.domainName+'/'+event.requestContext.stage;",
          "lineNumber": 140,
        },
        Object {
          "added": false,
          "line": "  const apiVersion='2018-11-29';",
          "lineNumber": 141,
        },
        Object {
          "added": false,
          "line": "  return new AWS.ApiGatewayManagementApi({ apiVersion, endpoint });",
          "lineNumber": 142,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 143,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 144,
        },
        Object {
          "added": false,
          "line": "const sendToClient = (data, connectionId, apigwManagementApi) => {",
          "lineNumber": 145,
        },
        Object {
          "added": false,
          "line": "  // console.log(\`sendToClient:\${connectionId}\`);",
          "lineNumber": 146,
        },
        Object {
          "added": false,
          "line": "  let sendee=data;",
          "lineNumber": 147,
        },
        Object {
          "added": false,
          "line": "  if ('object'==typeof data) sendee=JSON.stringify(data);",
          "lineNumber": 148,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 149,
        },
        Object {
          "added": false,
          "line": "  return apigwManagementApi.postToConnection({ConnectionId: connectionId, Data: sendee}).promise();",
          "lineNumber": 150,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 151,
        },
      ],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/manual_test_websocket_main/test/e2e/ws.e2e.js",
      "beforeName": "manual_test_websocket/manual_test_websocket_main/test/e2e/ws.e2e.js",
      "deleted": true,
      "modifiedLines": Array [
        Object {
          "added": false,
          "line": "const chai = require('chai');",
          "lineNumber": 2,
        },
        Object {
          "added": false,
          "line": "const chaiHttp = require('chai-http');",
          "lineNumber": 3,
        },
        Object {
          "added": false,
          "line": "chai.use(chaiHttp);",
          "lineNumber": 4,
        },
        Object {
          "added": false,
          "line": "const expect = chai.expect;",
          "lineNumber": 5,
        },
        Object {
          "added": false,
          "line": "const aws4  = require('aws4');",
          "lineNumber": 6,
        },
        Object {
          "added": false,
          "line": "const awscred = require('awscred');",
          "lineNumber": 7,
        },
        Object {
          "added": false,
          "line": "const moment = require('moment');",
          "lineNumber": 8,
        },
        Object {
          "added": false,
          "line": "const endpoint = process.env.npm_config_endpoint||'ws://localhost:3001';",
          "lineNumber": 9,
        },
        Object {
          "added": false,
          "line": "const timeout = process.env.npm_config_timeout?parseInt(process.env.npm_config_timeout):1000;",
          "lineNumber": 10,
        },
        Object {
          "added": false,
          "line": "const WebSocketTester=require('../support/WebSocketTester');",
          "lineNumber": 11,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 12,
        },
        Object {
          "added": false,
          "line": "describe('serverless', ()=>{",
          "lineNumber": 13,
        },
        Object {
          "added": false,
          "line": "  describe('with WebSocket support', ()=>{",
          "lineNumber": 14,
        },
        Object {
          "added": false,
          "line": "    let clients=[]; let req=null; let cred=null;",
          "lineNumber": 15,
        },
        Object {
          "added": false,
          "line": "    const createWebSocket=async (qs)=>{",
          "lineNumber": 16,
        },
        Object {
          "added": false,
          "line": "      const ws=new WebSocketTester();",
          "lineNumber": 17,
        },
        Object {
          "added": false,
          "line": "      let url=endpoint;",
          "lineNumber": 18,
        },
        Object {
          "added": false,
          "line": "      if (qs) url=\`\${endpoint}?\${qs}\`;",
          "lineNumber": 19,
        },
        Object {
          "added": false,
          "line": "      await ws.open(url);",
          "lineNumber": 20,
        },
        Object {
          "added": false,
          "line": "      clients.push(ws);",
          "lineNumber": 21,
        },
        Object {
          "added": false,
          "line": "      return ws;",
          "lineNumber": 22,
        },
        Object {
          "added": false,
          "line": "    };",
          "lineNumber": 23,
        },
        Object {
          "added": false,
          "line": "    const createClient=async (qs)=>{",
          "lineNumber": 24,
        },
        Object {
          "added": false,
          "line": "      const ws=await createWebSocket(qs);",
          "lineNumber": 25,
        },
        Object {
          "added": false,
          "line": "      ws.send(JSON.stringify({action:'getClientInfo'}));",
          "lineNumber": 26,
        },
        Object {
          "added": false,
          "line": "      const json=await ws.receive1();",
          "lineNumber": 27,
        },
        Object {
          "added": false,
          "line": "      const id=JSON.parse(json).info.id;",
          "lineNumber": 28,
        },
        Object {
          "added": false,
          "line": "      return {ws, id};",
          "lineNumber": 29,
        },
        Object {
          "added": false,
          "line": "    };",
          "lineNumber": 30,
        },
        Object {
          "added": false,
          "line": "    before(async ()=>{",
          "lineNumber": 31,
        },
        Object {
          "added": false,
          "line": "      req=chai.request(\`\${endpoint.replace('ws://', 'http://').replace('wss://', 'https://')}\`).keepOpen();",
          "lineNumber": 32,
        },
        Object {
          "added": false,
          "line": "      // req=chai.request('http://localhost:3001/dev').keepOpen();",
          "lineNumber": 33,
        },
        Object {
          "added": false,
          "line": "      cred=await new Promise((resolve, reject)=>{",
          "lineNumber": 34,
        },
        Object {
          "added": false,
          "line": "        awscred.loadCredentials(function(err, data) { if (err) reject(err); else resolve(data); });",
          "lineNumber": 35,
        },
        Object {
          "added": false,
          "line": "      });",
          "lineNumber": 36,
        },
        Object {
          "added": false,
          "line": "    });",
          "lineNumber": 37,
        },
        Object {
          "added": false,
          "line": "    ",
          "lineNumber": 38,
        },
        Object {
          "added": false,
          "line": "    beforeEach(()=>{",
          "lineNumber": 39,
        },
        Object {
          "added": false,
          "line": "      clients=[];",
          "lineNumber": 40,
        },
        Object {
          "added": false,
          "line": "    });",
          "lineNumber": 41,
        },
        Object {
          "added": false,
          "line": "    afterEach(async ()=>{",
          "lineNumber": 42,
        },
        Object {
          "added": false,
          "line": "      await Promise.all(clients.map(async (ws, i)=>{",
          "lineNumber": 43,
        },
        Object {
          "added": false,
          "line": "        const n=ws.countUnrecived();",
          "lineNumber": 44,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 45,
        },
        Object {
          "added": false,
          "line": "        if (n>0) {",
          "lineNumber": 46,
        },
        Object {
          "added": false,
          "line": "          console.log(\`unreceived:[i=\${i}]\`);",
          "lineNumber": 47,
        },
        Object {
          "added": false,
          "line": "          (await ws.receive(n)).forEach(m=>console.log(m));",
          "lineNumber": 48,
        },
        Object {
          "added": false,
          "line": "        }",
          "lineNumber": 49,
        },
        Object {
          "added": false,
          "line": "        expect(n).to.equal(0);",
          "lineNumber": 50,
        },
        Object {
          "added": false,
          "line": "        ws.close();",
          "lineNumber": 51,
        },
        Object {
          "added": false,
          "line": "      }));",
          "lineNumber": 52,
        },
        Object {
          "added": false,
          "line": "      clients=[];",
          "lineNumber": 53,
        },
        Object {
          "added": false,
          "line": "    });",
          "lineNumber": 54,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 55,
        },
        Object {
          "added": false,
          "line": "    it('should request to upgade to WebSocket when receving an HTTP request',  async ()=>{",
          "lineNumber": 56,
        },
        Object {
          "added": false,
          "line": "      const req=chai.request(\`\${endpoint.replace('ws://', 'http://').replace('wss://', 'https://')}\`).keepOpen();",
          "lineNumber": 57,
        },
        Object {
          "added": false,
          "line": "      let res=await req.get(\`/\${Date.now()}\`);//.set('Authorization', user.accessToken);",
          "lineNumber": 58,
        },
        Object {
          "added": false,
          "line": "      expect(res).to.have.status(426);",
          "lineNumber": 59,
        },
        Object {
          "added": false,
          "line": "      res=await req.get(\`/\${Date.now()}/\${Date.now()}\`);//.set('Authorization', user.accessToken);",
          "lineNumber": 60,
        },
        Object {
          "added": false,
          "line": "      expect(res).to.have.status(426);",
          "lineNumber": 61,
        },
        Object {
          "added": false,
          "line": "    }).timeout(timeout);",
          "lineNumber": 62,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 63,
        },
        Object {
          "added": false,
          "line": "    it('should open a WebSocket', async ()=>{",
          "lineNumber": 64,
        },
        Object {
          "added": false,
          "line": "      const ws=await createWebSocket();",
          "lineNumber": 65,
        },
        Object {
          "added": false,
          "line": "      expect(ws).not.to.be.undefined;",
          "lineNumber": 66,
        },
        Object {
          "added": false,
          "line": "    }).timeout(timeout);",
          "lineNumber": 67,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 68,
        },
        Object {
          "added": false,
          "line": "    it('should receive client connection info', async ()=>{",
          "lineNumber": 69,
        },
        Object {
          "added": false,
          "line": "      const ws=await createWebSocket();",
          "lineNumber": 70,
        },
        Object {
          "added": false,
          "line": "      ws.send(JSON.stringify({action:'getClientInfo'}));",
          "lineNumber": 71,
        },
        Object {
          "added": false,
          "line": "      const clientInfo=JSON.parse(await ws.receive1());",
          "lineNumber": 72,
        },
        Object {
          "added": false,
          "line": "      expect(clientInfo).to.deep.equal({action:'update', event:'client-info', info:{id:clientInfo.info.id}});",
          "lineNumber": 73,
        },
        Object {
          "added": false,
          "line": "    }).timeout(timeout);",
          "lineNumber": 74,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 75,
        },
        Object {
          "added": false,
          "line": "    it('should call default handler when no such action exists', async ()=>{",
          "lineNumber": 76,
        },
        Object {
          "added": false,
          "line": "      const ws=await createWebSocket();",
          "lineNumber": 77,
        },
        Object {
          "added": false,
          "line": "      const payload=JSON.stringify({action:'action'+Date.now()});",
          "lineNumber": 78,
        },
        Object {
          "added": false,
          "line": "      ws.send(payload);",
          "lineNumber": 79,
        },
        Object {
          "added": false,
          "line": "      expect(await ws.receive1()).to.equal(\`Error: No Supported Action in Payload '\${payload}'\`);",
          "lineNumber": 80,
        },
        Object {
          "added": false,
          "line": "    }).timeout(timeout);",
          "lineNumber": 81,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 82,
        },
        Object {
          "added": false,
          "line": "    it('should call default handler when no action provided', async ()=>{",
          "lineNumber": 83,
        },
        Object {
          "added": false,
          "line": "      const ws=await createWebSocket();",
          "lineNumber": 84,
        },
        Object {
          "added": false,
          "line": "      ws.send(JSON.stringify({hello:'world'}));",
          "lineNumber": 85,
        },
        Object {
          "added": false,
          "line": "      expect(await ws.receive1()).to.equal(\`Error: No Supported Action in Payload '{\\"hello\\":\\"world\\"}'\`);",
          "lineNumber": 86,
        },
        Object {
          "added": false,
          "line": "    }).timeout(timeout);",
          "lineNumber": 87,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 88,
        },
        Object {
          "added": false,
          "line": "    it('should send & receive data', async ()=>{",
          "lineNumber": 89,
        },
        Object {
          "added": false,
          "line": "      const c1=await createClient();",
          "lineNumber": 90,
        },
        Object {
          "added": false,
          "line": "      const c2=await createClient();",
          "lineNumber": 91,
        },
        Object {
          "added": false,
          "line": "      const c3=await createClient();",
          "lineNumber": 92,
        },
        Object {
          "added": false,
          "line": "      c1.ws.send(JSON.stringify({action:'send', data:'Hello World!', clients:[c1.id, c3.id]}));",
          "lineNumber": 93,
        },
        Object {
          "added": false,
          "line": "      expect(await c1.ws.receive1()).to.equal('Hello World!');",
          "lineNumber": 94,
        },
        Object {
          "added": false,
          "line": "      expect(await c3.ws.receive1()).to.equal('Hello World!');",
          "lineNumber": 95,
        },
        Object {
          "added": false,
          "line": "    }).timeout(timeout);",
          "lineNumber": 96,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 97,
        },
        Object {
          "added": false,
          "line": "    it('should respond when having an internal server error', async ()=>{",
          "lineNumber": 98,
        },
        Object {
          "added": false,
          "line": "      const conn=await createClient();",
          "lineNumber": 99,
        },
        Object {
          "added": false,
          "line": "      conn.ws.send(JSON.stringify({action:'makeError'}));",
          "lineNumber": 100,
        },
        Object {
          "added": false,
          "line": "      const res=JSON.parse(await conn.ws.receive1());",
          "lineNumber": 101,
        },
        Object {
          "added": false,
          "line": "      expect(res).to.deep.equal({message:'Internal server error', connectionId:conn.id, requestId:res.requestId});",
          "lineNumber": 102,
        },
        Object {
          "added": false,
          "line": "    }).timeout(timeout);",
          "lineNumber": 103,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 104,
        },
        Object {
          "added": false,
          "line": "    it('should respond via callback', async ()=>{",
          "lineNumber": 105,
        },
        Object {
          "added": false,
          "line": "      const ws=await createWebSocket();",
          "lineNumber": 106,
        },
        Object {
          "added": false,
          "line": "      ws.send(JSON.stringify({action:'replyViaCallback'}));",
          "lineNumber": 107,
        },
        Object {
          "added": false,
          "line": "      const res=JSON.parse(await ws.receive1());",
          "lineNumber": 108,
        },
        Object {
          "added": false,
          "line": "      expect(res).to.deep.equal({action:'update', event:'reply-via-callback'});",
          "lineNumber": 109,
        },
        Object {
          "added": false,
          "line": "    }).timeout(timeout);",
          "lineNumber": 110,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 111,
        },
        Object {
          "added": false,
          "line": "    it('should respond with error when calling callback(error)', async ()=>{",
          "lineNumber": 112,
        },
        Object {
          "added": false,
          "line": "      const conn=await createClient();",
          "lineNumber": 113,
        },
        Object {
          "added": false,
          "line": "      conn.ws.send(JSON.stringify({action:'replyErrorViaCallback'}));",
          "lineNumber": 114,
        },
        Object {
          "added": false,
          "line": "      const res=JSON.parse(await conn.ws.receive1());",
          "lineNumber": 115,
        },
        Object {
          "added": false,
          "line": "      expect(res).to.deep.equal({message:'Internal server error', connectionId:conn.id, requestId:res.requestId});",
          "lineNumber": 116,
        },
        Object {
          "added": false,
          "line": "    }).timeout(timeout);",
          "lineNumber": 117,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 118,
        },
        Object {
          "added": false,
          "line": "    it('should respond with only the last action when there are more than one in the serverless.yml file', async ()=>{",
          "lineNumber": 119,
        },
        Object {
          "added": false,
          "line": "      const ws=await createWebSocket();",
          "lineNumber": 120,
        },
        Object {
          "added": false,
          "line": "      ws.send(JSON.stringify({action:'makeMultiCalls'}));",
          "lineNumber": 121,
        },
        Object {
          "added": false,
          "line": "      const res=JSON.parse(await ws.receive1());",
          "lineNumber": 122,
        },
        Object {
          "added": false,
          "line": "      expect(res).to.deep.equal({action:'update', event:'made-call-2'});",
          "lineNumber": 123,
        },
        Object {
          "added": false,
          "line": "    }).timeout(timeout);",
          "lineNumber": 124,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 125,
        },
        Object {
          "added": false,
          "line": "    it('should not send to non existing client', async ()=>{",
          "lineNumber": 126,
        },
        Object {
          "added": false,
          "line": "      const c1=await createClient();",
          "lineNumber": 127,
        },
        Object {
          "added": false,
          "line": "      c1.ws.send(JSON.stringify({action:'send', data:'Hello World!', clients:[\\"non-existing-id\\"]}));",
          "lineNumber": 128,
        },
        Object {
          "added": false,
          "line": "      expect(await c1.ws.receive1()).to.equal('Error: Could not Send all Messages');",
          "lineNumber": 129,
        },
        Object {
          "added": false,
          "line": "    }).timeout(timeout);",
          "lineNumber": 130,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 131,
        },
        Object {
          "added": false,
          "line": "    it('should connect & disconnect', async ()=>{",
          "lineNumber": 132,
        },
        Object {
          "added": false,
          "line": "      const ws=await createWebSocket();",
          "lineNumber": 133,
        },
        Object {
          "added": false,
          "line": "      await ws.send(JSON.stringify({action:'registerListener'}));",
          "lineNumber": 134,
        },
        Object {
          "added": false,
          "line": "      await ws.receive1();",
          "lineNumber": 135,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 136,
        },
        Object {
          "added": false,
          "line": "      const c1=await createClient();",
          "lineNumber": 137,
        },
        Object {
          "added": false,
          "line": "      const connect1 = JSON.parse(await ws.receive1()); delete connect1.info.event; delete delete connect1.info.context;",
          "lineNumber": 138,
        },
        Object {
          "added": false,
          "line": "      expect(connect1).to.deep.equal({action:'update', event:'connect', info:{id:c1.id}});",
          "lineNumber": 139,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 140,
        },
        Object {
          "added": false,
          "line": "      const c2=await createClient();",
          "lineNumber": 141,
        },
        Object {
          "added": false,
          "line": "      const connect2 = JSON.parse(await ws.receive1()); delete connect2.info.event; delete delete connect2.info.context;",
          "lineNumber": 142,
        },
        Object {
          "added": false,
          "line": "      expect(connect2).to.deep.equal({action:'update', event:'connect', info:{id:c2.id}});",
          "lineNumber": 143,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 144,
        },
        Object {
          "added": false,
          "line": "      c2.ws.close();",
          "lineNumber": 145,
        },
        Object {
          "added": false,
          "line": "      const disconnect2 = JSON.parse(await ws.receive1()); delete disconnect2.info.event; delete delete disconnect2.info.context;",
          "lineNumber": 146,
        },
        Object {
          "added": false,
          "line": "      expect(disconnect2).to.deep.equal({action:'update', event:'disconnect', info:{id:c2.id}});",
          "lineNumber": 147,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 148,
        },
        Object {
          "added": false,
          "line": "      const c3=await createClient();",
          "lineNumber": 149,
        },
        Object {
          "added": false,
          "line": "      const connect3 = JSON.parse(await ws.receive1()); delete connect3.info.event; delete delete connect3.info.context;",
          "lineNumber": 150,
        },
        Object {
          "added": false,
          "line": "      expect(connect3).to.deep.equal({action:'update', event:'connect', info:{id:c3.id}});",
          "lineNumber": 151,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 152,
        },
        Object {
          "added": false,
          "line": "      c1.ws.close();",
          "lineNumber": 153,
        },
        Object {
          "added": false,
          "line": "      const disconnect1 = JSON.parse(await ws.receive1()); delete disconnect1.info.event; delete delete disconnect1.info.context;",
          "lineNumber": 154,
        },
        Object {
          "added": false,
          "line": "      expect(disconnect1).to.deep.equal({action:'update', event:'disconnect', info:{id:c1.id}});",
          "lineNumber": 155,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 156,
        },
        Object {
          "added": false,
          "line": "      c3.ws.close();",
          "lineNumber": 157,
        },
        Object {
          "added": false,
          "line": "      const disconnect3 = JSON.parse(await ws.receive1()); delete disconnect3.info.event; delete delete disconnect3.info.context;",
          "lineNumber": 158,
        },
        Object {
          "added": false,
          "line": "      expect(disconnect3).to.deep.equal({action:'update', event:'disconnect', info:{id:c3.id}});",
          "lineNumber": 159,
        },
        Object {
          "added": false,
          "line": "    }).timeout(timeout);",
          "lineNumber": 160,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 161,
        },
        Object {
          "added": false,
          "line": "    const createExpectedEvent=(connectionId, action, eventType, actualEvent)=>{",
          "lineNumber": 162,
        },
        Object {
          "added": false,
          "line": "      const url=new URL(endpoint);",
          "lineNumber": 163,
        },
        Object {
          "added": false,
          "line": "      const expected={",
          "lineNumber": 164,
        },
        Object {
          "added": false,
          "line": "        apiGatewayUrl: \`\${actualEvent.apiGatewayUrl}\`,",
          "lineNumber": 165,
        },
        Object {
          "added": false,
          "line": "        isBase64Encoded: false,",
          "lineNumber": 166,
        },
        Object {
          "added": false,
          "line": "        requestContext: {",
          "lineNumber": 167,
        },
        Object {
          "added": false,
          "line": "          apiId: actualEvent.requestContext.apiId,",
          "lineNumber": 168,
        },
        Object {
          "added": false,
          "line": "          connectedAt: actualEvent.requestContext.connectedAt,",
          "lineNumber": 169,
        },
        Object {
          "added": false,
          "line": "          connectionId: \`\${connectionId}\`,",
          "lineNumber": 170,
        },
        Object {
          "added": false,
          "line": "          domainName: url.hostname,",
          "lineNumber": 171,
        },
        Object {
          "added": false,
          "line": "          eventType,",
          "lineNumber": 172,
        },
        Object {
          "added": false,
          "line": "          extendedRequestId: actualEvent.requestContext.extendedRequestId,",
          "lineNumber": 173,
        },
        Object {
          "added": false,
          "line": "          identity: {",
          "lineNumber": 174,
        },
        Object {
          "added": false,
          "line": "            accessKey: null,",
          "lineNumber": 175,
        },
        Object {
          "added": false,
          "line": "            accountId: null,",
          "lineNumber": 176,
        },
        Object {
          "added": false,
          "line": "            caller: null,",
          "lineNumber": 177,
        },
        Object {
          "added": false,
          "line": "            cognitoAuthenticationProvider: null,",
          "lineNumber": 178,
        },
        Object {
          "added": false,
          "line": "            cognitoAuthenticationType: null,",
          "lineNumber": 179,
        },
        Object {
          "added": false,
          "line": "            cognitoIdentityId: null,",
          "lineNumber": 180,
        },
        Object {
          "added": false,
          "line": "            cognitoIdentityPoolId: null,",
          "lineNumber": 181,
        },
        Object {
          "added": false,
          "line": "            principalOrgId: null,",
          "lineNumber": 182,
        },
        Object {
          "added": false,
          "line": "            sourceIp: actualEvent.requestContext.identity.sourceIp,",
          "lineNumber": 183,
        },
        Object {
          "added": false,
          "line": "            user: null,",
          "lineNumber": 184,
        },
        Object {
          "added": false,
          "line": "            userAgent: null,",
          "lineNumber": 185,
        },
        Object {
          "added": false,
          "line": "            userArn: null,",
          "lineNumber": 186,
        },
        Object {
          "added": false,
          "line": "          },",
          "lineNumber": 187,
        },
        Object {
          "added": false,
          "line": "          messageDirection: 'IN',",
          "lineNumber": 188,
        },
        Object {
          "added": false,
          "line": "          messageId: actualEvent.requestContext.messageId,",
          "lineNumber": 189,
        },
        Object {
          "added": false,
          "line": "          requestId: actualEvent.requestContext.requestId,",
          "lineNumber": 190,
        },
        Object {
          "added": false,
          "line": "          requestTime: actualEvent.requestContext.requestTime,",
          "lineNumber": 191,
        },
        Object {
          "added": false,
          "line": "          requestTimeEpoch: actualEvent.requestContext.requestTimeEpoch,",
          "lineNumber": 192,
        },
        Object {
          "added": false,
          "line": "          routeKey: action,",
          "lineNumber": 193,
        },
        Object {
          "added": false,
          "line": "          stage: actualEvent.requestContext.stage,",
          "lineNumber": 194,
        },
        Object {
          "added": false,
          "line": "        },",
          "lineNumber": 195,
        },
        Object {
          "added": false,
          "line": "      };",
          "lineNumber": 196,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 197,
        },
        Object {
          "added": false,
          "line": "      return expected;",
          "lineNumber": 198,
        },
        Object {
          "added": false,
          "line": "    };",
          "lineNumber": 199,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 200,
        },
        Object {
          "added": false,
          "line": "    const createExpectedContext=(actualContext)=>{",
          "lineNumber": 201,
        },
        Object {
          "added": false,
          "line": "      const expected={",
          "lineNumber": 202,
        },
        Object {
          "added": false,
          "line": "          awsRequestId: actualContext.awsRequestId,",
          "lineNumber": 203,
        },
        Object {
          "added": false,
          "line": "          callbackWaitsForEmptyEventLoop: true,",
          "lineNumber": 204,
        },
        Object {
          "added": false,
          "line": "          functionName: actualContext.functionName,",
          "lineNumber": 205,
        },
        Object {
          "added": false,
          "line": "          functionVersion: '$LATEST',",
          "lineNumber": 206,
        },
        Object {
          "added": false,
          "line": "          invokedFunctionArn: actualContext.invokedFunctionArn,",
          "lineNumber": 207,
        },
        Object {
          "added": false,
          "line": "          invokeid: actualContext.invokeid,",
          "lineNumber": 208,
        },
        Object {
          "added": false,
          "line": "          logGroupName: actualContext.logGroupName,",
          "lineNumber": 209,
        },
        Object {
          "added": false,
          "line": "          logStreamName: actualContext.logStreamName,",
          "lineNumber": 210,
        },
        Object {
          "added": false,
          "line": "          memoryLimitInMB: actualContext.memoryLimitInMB,",
          "lineNumber": 211,
        },
        Object {
          "added": false,
          "line": "        };",
          "lineNumber": 212,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 213,
        },
        Object {
          "added": false,
          "line": "        return expected;",
          "lineNumber": 214,
        },
        Object {
          "added": false,
          "line": "    };",
          "lineNumber": 215,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 216,
        },
        Object {
          "added": false,
          "line": "    const createExpectedConnectHeaders=(actualHeaders)=>{",
          "lineNumber": 217,
        },
        Object {
          "added": false,
          "line": "      const url=new URL(endpoint); ",
          "lineNumber": 218,
        },
        Object {
          "added": false,
          "line": "      const expected={",
          "lineNumber": 219,
        },
        Object {
          "added": false,
          "line": "        Host: url.hostname,",
          "lineNumber": 220,
        },
        Object {
          "added": false,
          "line": "        'Sec-WebSocket-Extensions': actualHeaders['Sec-WebSocket-Extensions'],",
          "lineNumber": 221,
        },
        Object {
          "added": false,
          "line": "        'Sec-WebSocket-Key': actualHeaders['Sec-WebSocket-Key'],",
          "lineNumber": 222,
        },
        Object {
          "added": false,
          "line": "        'Sec-WebSocket-Version': actualHeaders['Sec-WebSocket-Version'],",
          "lineNumber": 223,
        },
        Object {
          "added": false,
          "line": "        'X-Amzn-Trace-Id': actualHeaders['X-Amzn-Trace-Id'],",
          "lineNumber": 224,
        },
        Object {
          "added": false,
          "line": "        'X-Forwarded-For': actualHeaders['X-Forwarded-For'],",
          "lineNumber": 225,
        },
        Object {
          "added": false,
          "line": "        'X-Forwarded-Port': \`\${url.port||443}\`,",
          "lineNumber": 226,
        },
        Object {
          "added": false,
          "line": "        'X-Forwarded-Proto': \`\${url.protocol.replace('ws', 'http').replace('wss',  'https').replace(':', '')}\`",
          "lineNumber": 227,
        },
        Object {
          "added": false,
          "line": "      };",
          "lineNumber": 228,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 229,
        },
        Object {
          "added": false,
          "line": "      return expected;",
          "lineNumber": 230,
        },
        Object {
          "added": false,
          "line": "    };",
          "lineNumber": 231,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 232,
        },
        Object {
          "added": false,
          "line": "    const createExpectedDisconnectHeaders=(actualHeaders)=>{",
          "lineNumber": 233,
        },
        Object {
          "added": false,
          "line": "      const url=new URL(endpoint); ",
          "lineNumber": 234,
        },
        Object {
          "added": false,
          "line": "      const expected={",
          "lineNumber": 235,
        },
        Object {
          "added": false,
          "line": "        Host: url.hostname,",
          "lineNumber": 236,
        },
        Object {
          "added": false,
          "line": "        'x-api-key': '',",
          "lineNumber": 237,
        },
        Object {
          "added": false,
          "line": "        'x-restapi': '',",
          "lineNumber": 238,
        },
        Object {
          "added": false,
          "line": "      };",
          "lineNumber": 239,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 240,
        },
        Object {
          "added": false,
          "line": "      return expected;",
          "lineNumber": 241,
        },
        Object {
          "added": false,
          "line": "    };",
          "lineNumber": 242,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 243,
        },
        Object {
          "added": false,
          "line": "    const createExpectedConnectMultiValueHeaders=(actualHeaders)=>{",
          "lineNumber": 244,
        },
        Object {
          "added": false,
          "line": "      const expected=createExpectedConnectHeaders(actualHeaders);",
          "lineNumber": 245,
        },
        Object {
          "added": false,
          "line": "      Object.keys(expected).map((key, index)=>{",
          "lineNumber": 246,
        },
        Object {
          "added": false,
          "line": "        expected[key] = [expected[key]];",
          "lineNumber": 247,
        },
        Object {
          "added": false,
          "line": "      });",
          "lineNumber": 248,
        },
        Object {
          "added": false,
          "line": "      return expected;",
          "lineNumber": 249,
        },
        Object {
          "added": false,
          "line": "    };",
          "lineNumber": 250,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 251,
        },
        Object {
          "added": false,
          "line": "    const createExpectedDisconnectMultiValueHeaders=(actualHeaders)=>{",
          "lineNumber": 252,
        },
        Object {
          "added": false,
          "line": "      const expected=createExpectedDisconnectHeaders(actualHeaders);",
          "lineNumber": 253,
        },
        Object {
          "added": false,
          "line": "      Object.keys(expected).map((key, index)=>{",
          "lineNumber": 254,
        },
        Object {
          "added": false,
          "line": "        expected[key] = [expected[key]];",
          "lineNumber": 255,
        },
        Object {
          "added": false,
          "line": "      });",
          "lineNumber": 256,
        },
        Object {
          "added": false,
          "line": "      return expected;",
          "lineNumber": 257,
        },
        Object {
          "added": false,
          "line": "    };",
          "lineNumber": 258,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 259,
        },
        Object {
          "added": false,
          "line": "    it('should receive correct call info', async ()=>{",
          "lineNumber": 260,
        },
        Object {
          "added": false,
          "line": "      const ws=await createWebSocket();",
          "lineNumber": 261,
        },
        Object {
          "added": false,
          "line": "      await ws.send(JSON.stringify({action:'registerListener'}));",
          "lineNumber": 262,
        },
        Object {
          "added": false,
          "line": "      await ws.receive1();",
          "lineNumber": 263,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 264,
        },
        Object {
          "added": false,
          "line": "      // connect",
          "lineNumber": 265,
        },
        Object {
          "added": false,
          "line": "      const c=await createClient();",
          "lineNumber": 266,
        },
        Object {
          "added": false,
          "line": "      const connect=JSON.parse(await ws.receive1());",
          "lineNumber": 267,
        },
        Object {
          "added": false,
          "line": "      let now=Date.now(); ",
          "lineNumber": 268,
        },
        Object {
          "added": false,
          "line": "      let expectedCallInfo={id:c.id, event:{headers:createExpectedConnectHeaders(connect.info.event.headers), multiValueHeaders:createExpectedConnectMultiValueHeaders(connect.info.event.headers), ...createExpectedEvent(c.id, '$connect',  'CONNECT', connect.info.event)}, context:createExpectedContext(connect.info.context)};",
          "lineNumber": 269,
        },
        Object {
          "added": false,
          "line": "      expect(connect).to.deep.equal({action:'update', event:'connect', info:expectedCallInfo});",
          "lineNumber": 270,
        },
        Object {
          "added": false,
          "line": "      expect(connect.info.event.requestContext.requestTimeEpoch).to.be.within(connect.info.event.requestContext.connectedAt-10, connect.info.event.requestContext.requestTimeEpoch+10);",
          "lineNumber": 271,
        },
        Object {
          "added": false,
          "line": "      expect(connect.info.event.requestContext.connectedAt).to.be.within(now-timeout, now);",
          "lineNumber": 272,
        },
        Object {
          "added": false,
          "line": "      expect(connect.info.event.requestContext.requestTimeEpoch).to.be.within(now-timeout, now);",
          "lineNumber": 273,
        },
        Object {
          "added": false,
          "line": "      expect(moment.utc(connect.info.event.requestContext.requestTime, 'D/MMM/YYYY:H:m:s Z').toDate().getTime()).to.be.within(now-timeout, now);",
          "lineNumber": 274,
        },
        Object {
          "added": false,
          "line": "      if (endpoint.startsWith('ws://locahost')) {",
          "lineNumber": 275,
        },
        Object {
          "added": false,
          "line": "        expect(connect.info.event.apiGatewayUrl).to.equal(endpoint.replace('ws://', 'http://').replace('wss://', 'https://'));",
          "lineNumber": 276,
        },
        Object {
          "added": false,
          "line": "        expect(connect.info.event.headers['X-Forwarded-For']).to.be.equal('127.0.0.1');",
          "lineNumber": 277,
        },
        Object {
          "added": false,
          "line": "      }",
          "lineNumber": 278,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 279,
        },
        Object {
          "added": false,
          "line": "      // getCallInfo",
          "lineNumber": 280,
        },
        Object {
          "added": false,
          "line": "      c.ws.send(JSON.stringify({action:'getCallInfo'}));",
          "lineNumber": 281,
        },
        Object {
          "added": false,
          "line": "      const callInfo=JSON.parse(await c.ws.receive1());",
          "lineNumber": 282,
        },
        Object {
          "added": false,
          "line": "      now=Date.now(); ",
          "lineNumber": 283,
        },
        Object {
          "added": false,
          "line": "      expectedCallInfo={event:{body: '{\\\\\\"action\\\\\\":\\\\\\"getCallInfo\\\\\\"}', ...createExpectedEvent(c.id, 'getCallInfo',  'MESSAGE', callInfo.info.event)}, context:createExpectedContext(callInfo.info.context)};",
          "lineNumber": 284,
        },
        Object {
          "added": false,
          "line": "      expect(callInfo).to.deep.equal({action:'update', event:'call-info', info:expectedCallInfo});",
          "lineNumber": 285,
        },
        Object {
          "added": false,
          "line": "      expect(callInfo.info.event.requestContext.connectedAt).to.be.lt(callInfo.info.event.requestContext.requestTimeEpoch);",
          "lineNumber": 286,
        },
        Object {
          "added": false,
          "line": "      expect(callInfo.info.event.requestContext.connectedAt).to.be.within(now-timeout, now);",
          "lineNumber": 287,
        },
        Object {
          "added": false,
          "line": "      expect(callInfo.info.event.requestContext.requestTimeEpoch).to.be.within(now-timeout, now);",
          "lineNumber": 288,
        },
        Object {
          "added": false,
          "line": "      expect(moment.utc(callInfo.info.event.requestContext.requestTime, 'D/MMM/YYYY:H:m:s Z').toDate().getTime()).to.be.within(now-timeout, now);",
          "lineNumber": 289,
        },
        Object {
          "added": false,
          "line": "      if (endpoint.startsWith('ws://locahost')) expect(callInfo.info.event.apiGatewayUrl).to.equal(endpoint.replace('ws://', 'http://').replace('wss://', 'https://'));",
          "lineNumber": 290,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 291,
        },
        Object {
          "added": false,
          "line": "      // disconnect",
          "lineNumber": 292,
        },
        Object {
          "added": false,
          "line": "      c.ws.close();",
          "lineNumber": 293,
        },
        Object {
          "added": false,
          "line": "      const disconnect=JSON.parse(await ws.receive1());",
          "lineNumber": 294,
        },
        Object {
          "added": false,
          "line": "      now=Date.now(); ",
          "lineNumber": 295,
        },
        Object {
          "added": false,
          "line": "      expectedCallInfo={id:c.id, event:{headers:createExpectedDisconnectHeaders(disconnect.info.event.headers), multiValueHeaders:createExpectedDisconnectMultiValueHeaders(disconnect.info.event.headers), ...createExpectedEvent(c.id, '$disconnect',  'DISCONNECT', disconnect.info.event)}, context:createExpectedContext(disconnect.info.context)};",
          "lineNumber": 296,
        },
        Object {
          "added": false,
          "line": "      expect(disconnect).to.deep.equal({action:'update', event:'disconnect', info:expectedCallInfo});",
          "lineNumber": 297,
        },
        Object {
          "added": false,
          "line": "    }).timeout(timeout);",
          "lineNumber": 298,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 299,
        },
        Object {
          "added": false,
          "line": "    it('should be able to parse query string', async ()=>{",
          "lineNumber": 300,
        },
        Object {
          "added": false,
          "line": "      const now=''+Date.now();",
          "lineNumber": 301,
        },
        Object {
          "added": false,
          "line": "      const ws=await createWebSocket();",
          "lineNumber": 302,
        },
        Object {
          "added": false,
          "line": "      await ws.send(JSON.stringify({action:'registerListener'}));",
          "lineNumber": 303,
        },
        Object {
          "added": false,
          "line": "      await ws.receive1();",
          "lineNumber": 304,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 305,
        },
        Object {
          "added": false,
          "line": "      const c1=await createClient();",
          "lineNumber": 306,
        },
        Object {
          "added": false,
          "line": "      const c2=await createClient(\`now=\${now}&before=123456789\`);",
          "lineNumber": 307,
        },
        Object {
          "added": false,
          "line": "      expect(JSON.parse(await ws.receive1()).info.event.queryStringParameters).to.be.undefined;",
          "lineNumber": 308,
        },
        Object {
          "added": false,
          "line": "      expect(JSON.parse(await ws.receive1()).info.event.queryStringParameters).to.deep.equal({now, before:'123456789'});",
          "lineNumber": 309,
        },
        Object {
          "added": false,
          "line": "    }).timeout(timeout);",
          "lineNumber": 310,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 311,
        },
        Object {
          "added": false,
          "line": "    it('should be able to receive messages via REST API', async ()=>{",
          "lineNumber": 312,
        },
        Object {
          "added": false,
          "line": "      const c1=await createClient();",
          "lineNumber": 313,
        },
        Object {
          "added": false,
          "line": "      const c2=await createClient();",
          "lineNumber": 314,
        },
        Object {
          "added": false,
          "line": "      const url=new URL(endpoint);",
          "lineNumber": 315,
        },
        Object {
          "added": false,
          "line": "      const signature = {service: 'execute-api', host:url.host, path:\`\${url.pathname}/@connections/\${c2.id}\`, method: 'POST', body:'Hello World!', headers:{'Content-Type':'text/plain'/*'application/text'*/}};",
          "lineNumber": 316,
        },
        Object {
          "added": false,
          "line": "      aws4.sign(signature, {accessKeyId: cred.accessKeyId, secretAccessKey: cred.secretAccessKey});",
          "lineNumber": 317,
        },
        Object {
          "added": false,
          "line": "      const res=await req.post(signature.path.replace(url.pathname, '')).set('X-Amz-Date', signature.headers['X-Amz-Date']).set('Authorization', signature.headers['Authorization']).set('Content-Type', signature.headers['Content-Type']).send('Hello World!');",
          "lineNumber": 318,
        },
        Object {
          "added": false,
          "line": "      expect(res).to.have.status(200);",
          "lineNumber": 319,
        },
        Object {
          "added": false,
          "line": "      expect(await c2.ws.receive1()).to.equal('Hello World!');",
          "lineNumber": 320,
        },
        Object {
          "added": false,
          "line": "    }).timeout(timeout);",
          "lineNumber": 321,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 322,
        },
        Object {
          "added": false,
          "line": "    it('should receive error code when sending to non existing client via REST API', async ()=>{",
          "lineNumber": 323,
        },
        Object {
          "added": false,
          "line": "      const c='aJz0Md6VoAMCIbQ=';",
          "lineNumber": 324,
        },
        Object {
          "added": false,
          "line": "      const url=new URL(endpoint);",
          "lineNumber": 325,
        },
        Object {
          "added": false,
          "line": "      const signature = {service: 'execute-api', host:url.host, path:\`\${url.pathname}/@connections/\${c}\`, method: 'POST', body:'Hello World!', headers:{'Content-Type':'text/plain'/*'application/text'*/}};",
          "lineNumber": 326,
        },
        Object {
          "added": false,
          "line": "      aws4.sign(signature, {accessKeyId: cred.accessKeyId, secretAccessKey: cred.secretAccessKey});",
          "lineNumber": 327,
        },
        Object {
          "added": false,
          "line": "      const res=await req.post(signature.path.replace(url.pathname, '')).set('X-Amz-Date', signature.headers['X-Amz-Date']).set('Authorization', signature.headers['Authorization']).set('Content-Type', signature.headers['Content-Type']).send('Hello World!');",
          "lineNumber": 328,
        },
        Object {
          "added": false,
          "line": "      expect(res).to.have.status(410);",
          "lineNumber": 329,
        },
        Object {
          "added": false,
          "line": "    }).timeout(timeout);",
          "lineNumber": 330,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 331,
        },
        Object {
          "added": false,
          "line": "    // UNABLE TO TEST HIS SCENARIO BECAUSE AWS DOESN'T RETURN ANYTHING",
          "lineNumber": 332,
        },
        Object {
          "added": false,
          "line": "    // it('should not receive anything when POSTing nothing', async ()=>{",
          "lineNumber": 333,
        },
        Object {
          "added": false,
          "line": "    //   const c1=await createClient();",
          "lineNumber": 334,
        },
        Object {
          "added": false,
          "line": "    //   const url=new URL(endpoint);",
          "lineNumber": 335,
        },
        Object {
          "added": false,
          "line": "    //   const signature = {service: 'execute-api', host:url.host, path:\`\${url.pathname}/@connections/\${c1.id}\`, method: 'POST'/*, body:'Hello World!'*/, headers:{'Content-Type':'text/plain'/*'application/text'*/}};",
          "lineNumber": 336,
        },
        Object {
          "added": false,
          "line": "    //   aws4.sign(signature, {accessKeyId: cred.accessKeyId, secretAccessKey: cred.secretAccessKey});",
          "lineNumber": 337,
        },
        Object {
          "added": false,
          "line": "    //   const res=await req.post(signature.path.replace(url.pathname, '')).set('X-Amz-Date', signature.headers['X-Amz-Date']).set('Authorization', signature.headers['Authorization']).set('Content-Type', signature.headers['Content-Type']).send(/*'Hello World!'*/);",
          "lineNumber": 338,
        },
        Object {
          "added": false,
          "line": "    //   expect(res).to.have.status(200);",
          "lineNumber": 339,
        },
        Object {
          "added": false,
          "line": "    // }).timeout(timeout);",
          "lineNumber": 340,
        },
        Object {
          "added": false,
          "line": "    ",
          "lineNumber": 341,
        },
        Object {
          "added": false,
          "line": "  });",
          "lineNumber": 342,
        },
        Object {
          "added": false,
          "line": "});",
          "lineNumber": 343,
        },
      ],
    },
    Object {
      "added": false,
      "afterName": "manual_test_websocket/manual_test_websocket_main/test/support/WebSocketTester.js",
      "beforeName": "manual_test_websocket/manual_test_websocket_main/test/support/WebSocketTester.js",
      "deleted": true,
      "modifiedLines": Array [
        Object {
          "added": false,
          "line": "const WebSocket = require('ws');",
          "lineNumber": 2,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 3,
        },
        Object {
          "added": false,
          "line": "class WebSocketTester {",
          "lineNumber": 4,
        },
        Object {
          "added": false,
          "line": "  constructor() {",
          "lineNumber": 5,
        },
        Object {
          "added": false,
          "line": "    this.messages=[]; this.receivers=[];",
          "lineNumber": 6,
        },
        Object {
          "added": false,
          "line": "  }",
          "lineNumber": 7,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 8,
        },
        Object {
          "added": false,
          "line": "  open(url) {",
          "lineNumber": 9,
        },
        Object {
          "added": false,
          "line": "    if (null!=this.ws) return;",
          "lineNumber": 10,
        },
        Object {
          "added": false,
          "line": "    const ws=this.ws=new WebSocket(url);",
          "lineNumber": 11,
        },
        Object {
          "added": false,
          "line": "    ws.on('message', (message)=>{",
          "lineNumber": 12,
        },
        Object {
          "added": false,
          "line": "      // console.log('Received: '+message);",
          "lineNumber": 13,
        },
        Object {
          "added": false,
          "line": "      if (0<this.receivers.length) this.receivers.shift()(message);",
          "lineNumber": 14,
        },
        Object {
          "added": false,
          "line": "      else this.messages.push(message);",
          "lineNumber": 15,
        },
        Object {
          "added": false,
          "line": "    });",
          "lineNumber": 16,
        },
        Object {
          "added": false,
          "line": "    return new Promise((resolve/*, reject*/)=> {",
          "lineNumber": 17,
        },
        Object {
          "added": false,
          "line": "      ws.on('open', ()=>{",
          "lineNumber": 18,
        },
        Object {
          "added": false,
          "line": "        resolve(true);",
          "lineNumber": 19,
        },
        Object {
          "added": false,
          "line": "      });",
          "lineNumber": 20,
        },
        Object {
          "added": false,
          "line": "    });",
          "lineNumber": 21,
        },
        Object {
          "added": false,
          "line": "  }",
          "lineNumber": 22,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 23,
        },
        Object {
          "added": false,
          "line": "  send(data) {",
          "lineNumber": 24,
        },
        Object {
          "added": false,
          "line": "    this.ws.send(data);",
          "lineNumber": 25,
        },
        Object {
          "added": false,
          "line": "  }",
          "lineNumber": 26,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 27,
        },
        Object {
          "added": false,
          "line": "  receive1() {",
          "lineNumber": 28,
        },
        Object {
          "added": false,
          "line": "    return new Promise((resolve/*, reject*/)=>{",
          "lineNumber": 29,
        },
        Object {
          "added": false,
          "line": "      if (0<this.messages.length) resolve(this.messages.shift());",
          "lineNumber": 30,
        },
        Object {
          "added": false,
          "line": "      else this.receivers.push(resolve);",
          "lineNumber": 31,
        },
        Object {
          "added": false,
          "line": "    });",
          "lineNumber": 32,
        },
        Object {
          "added": false,
          "line": "  }",
          "lineNumber": 33,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 34,
        },
        Object {
          "added": false,
          "line": "  receive(n) {",
          "lineNumber": 35,
        },
        Object {
          "added": false,
          "line": "    return new Promise((resolve/*, reject*/)=>{",
          "lineNumber": 36,
        },
        Object {
          "added": false,
          "line": "      const messages=[];",
          "lineNumber": 37,
        },
        Object {
          "added": false,
          "line": "      for (let i=0; i<n; i+=1) {",
          "lineNumber": 38,
        },
        Object {
          "added": false,
          "line": "        this.receive1().then((message)=>{",
          "lineNumber": 39,
        },
        Object {
          "added": false,
          "line": "          messages[i]=message;",
          "lineNumber": 40,
        },
        Object {
          "added": false,
          "line": "          if (i===n-1) resolve(messages);",
          "lineNumber": 41,
        },
        Object {
          "added": false,
          "line": "        });",
          "lineNumber": 42,
        },
        Object {
          "added": false,
          "line": "      }",
          "lineNumber": 43,
        },
        Object {
          "added": false,
          "line": "    });",
          "lineNumber": 44,
        },
        Object {
          "added": false,
          "line": "  }",
          "lineNumber": 45,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 46,
        },
        Object {
          "added": false,
          "line": "  skip() {",
          "lineNumber": 47,
        },
        Object {
          "added": false,
          "line": "    if (0<this.messages.length) this.messages.shift();",
          "lineNumber": 48,
        },
        Object {
          "added": false,
          "line": "    else this.receivers.push(()=>{});",
          "lineNumber": 49,
        },
        Object {
          "added": false,
          "line": "  }",
          "lineNumber": 50,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 51,
        },
        Object {
          "added": false,
          "line": "  countUnrecived() {",
          "lineNumber": 52,
        },
        Object {
          "added": false,
          "line": "    return this.messages.length;",
          "lineNumber": 53,
        },
        Object {
          "added": false,
          "line": "  }",
          "lineNumber": 54,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 55,
        },
        Object {
          "added": false,
          "line": "  close() {",
          "lineNumber": 56,
        },
        Object {
          "added": false,
          "line": "    if (null!=this.ws) this.ws.close();",
          "lineNumber": 57,
        },
        Object {
          "added": false,
          "line": "  }",
          "lineNumber": 58,
        },
        Object {
          "added": false,
          "line": "};",
          "lineNumber": 59,
        },
        Object {
          "added": false,
          "line": "",
          "lineNumber": 60,
        },
        Object {
          "added": false,
          "line": "module.exports=WebSocketTester;",
          "lineNumber": 61,
        },
      ],
    },
  ],
  "hash": "e54cdc33da095bebd6c6bf0d2cc502bb7549b072",
  "message": "[PATCH] Lint and rename folders",
}
`;

exports[`parse git patch file parses a many-files patch 1`] = `
Object {
  "authorEmail": "dnalborczyk@gmail.com",
  "authorName": "Daniel Nalborczyk",
  "date": "Sat, 11 Jan 2020 08:19:48 -0500",
  "files": Array [
    Object {
      "added": false,
      "afterName": "src/events/http/HttpServer.js",
      "beforeName": "src/events/http/HttpServer.js",
      "deleted": false,
      "modifiedLines": Array [
        Object {
          "added": true,
          "line": "              _path,",
          "lineNumber": 477,
        },
        Object {
          "added": true,
          "line": "          _path,",
          "lineNumber": 493,
        },
      ],
    },
    Object {
      "added": false,
      "afterName": "src/events/http/lambda-events/LambdaIntegrationEvent.js",
      "beforeName": "src/events/http/lambda-events/LambdaIntegrationEvent.js",
      "deleted": false,
      "modifiedLines": Array [
        Object {
          "added": true,
          "line": "  #path = null",
          "lineNumber": 6,
        },
        Object {
          "added": false,
          "line": "  constructor(request, stage, requestTemplate) {",
          "lineNumber": 10,
        },
        Object {
          "added": true,
          "line": "  constructor(request, stage, requestTemplate, path) {",
          "lineNumber": 11,
        },
        Object {
          "added": true,
          "line": "    this.#path = path",
          "lineNumber": 12,
        },
        Object {
          "added": true,
          "line": "      this.#path,",
          "lineNumber": 23,
        },
      ],
    },
    Object {
      "added": false,
      "afterName": "src/events/http/lambda-events/LambdaProxyIntegrationEvent.js",
      "beforeName": "src/events/http/lambda-events/LambdaProxyIntegrationEvent.js",
      "deleted": false,
      "modifiedLines": Array [
        Object {
          "added": true,
          "line": "  #path = null",
          "lineNumber": 20,
        },
        Object {
          "added": false,
          "line": "  constructor(request, stage) {",
          "lineNumber": 23,
        },
        Object {
          "added": true,
          "line": "  constructor(request, stage, path) {",
          "lineNumber": 24,
        },
        Object {
          "added": true,
          "line": "    this.#path = path",
          "lineNumber": 25,
        },
        Object {
          "added": false,
          "line": "      path,",
          "lineNumber": 110,
        },
        Object {
          "added": false,
          "line": "      path,",
          "lineNumber": 129,
        },
        Object {
          "added": true,
          "line": "      path: this.#path,",
          "lineNumber": 130,
        },
        Object {
          "added": false,
          "line": "        path: \`/\${this.#stage}\${this.#request.route.path}\`,",
          "lineNumber": 174,
        },
        Object {
          "added": true,
          "line": "        path: this.#request.route.path,",
          "lineNumber": 175,
        },
        Object {
          "added": false,
          "line": "        resourcePath: this.#request.route.path,",
          "lineNumber": 180,
        },
        Object {
          "added": true,
          "line": "        resourcePath: this.#path,",
          "lineNumber": 181,
        },
        Object {
          "added": false,
          "line": "      resource: this.#request.route.path,",
          "lineNumber": 183,
        },
        Object {
          "added": true,
          "line": "      resource: this.#path,",
          "lineNumber": 184,
        },
      ],
    },
    Object {
      "added": false,
      "afterName": "src/events/http/lambda-events/VelocityContext.js",
      "beforeName": "src/events/http/lambda-events/VelocityContext.js",
      "deleted": false,
      "modifiedLines": Array [
        Object {
          "added": true,
          "line": "  #path = null",
          "lineNumber": 40,
        },
        Object {
          "added": false,
          "line": "  constructor(request, stage, payload) {",
          "lineNumber": 44,
        },
        Object {
          "added": true,
          "line": "  constructor(request, stage, payload, path) {",
          "lineNumber": 45,
        },
        Object {
          "added": true,
          "line": "    this.#path = path",
          "lineNumber": 46,
        },
        Object {
          "added": false,
          "line": "        resourcePath: this.#request.route.path,",
          "lineNumber": 110,
        },
        Object {
          "added": true,
          "line": "        resourcePath: this.#path,",
          "lineNumber": 112,
        },
      ],
    },
  ],
  "hash": "a7696becf41fa2b5c9c93770e25a5cce6174d3b8",
  "message": "[PATCH] Fix path/resource/resourcePath in Lambda events, fixes #868",
}
`;

exports[`parse git patch file parses a renaming patch 1`] = `
Object {
  "authorEmail": "dherault@gmail.com",
  "authorName": "=?UTF-8?q?David=20H=C3=A9rault?=",
  "date": "Mon, 27 Jan 2020 17:35:01 +0100",
  "files": Array [
    Object {
      "added": false,
      "afterName": "README.mdx",
      "beforeName": "README.md",
      "deleted": false,
      "modifiedLines": Array [],
    },
  ],
  "hash": "68ec4bbde5244929afee1b39e09dced6fad1a725",
  "message": "[PATCH] Rename README",
}
`;

exports[`parse git patch file parses a simple patch 1`] = `
Object {
  "authorEmail": "13507001+arnas@users.noreply.github.com",
  "authorName": "Arnas Gecas",
  "date": "Sat, 25 Jan 2020 19:21:35 +0200",
  "files": Array [
    Object {
      "added": false,
      "afterName": "src/events/http/HttpServer.js",
      "beforeName": "src/events/http/HttpServer.js",
      "deleted": false,
      "modifiedLines": Array [
        Object {
          "added": false,
          "line": "        if (result && typeof result.body !== 'undefined') {",
          "lineNumber": 774,
        },
        Object {
          "added": true,
          "line": "        if (typeof result === 'string') {",
          "lineNumber": 774,
        },
        Object {
          "added": true,
          "line": "          response.source = JSON.stringify(result)",
          "lineNumber": 775,
        },
        Object {
          "added": true,
          "line": "        } else if (result && typeof result.body !== 'undefined') {",
          "lineNumber": 776,
        },
      ],
    },
  ],
  "hash": "0f6f88c98fff3afa0289f46bf4eab469f45eebc6",
  "message": "[PATCH] JSON stringify string responses",
}
`;

exports[`parse git patch file parses a simple patch 2`] = `
Object {
  "files": Array [
    Object {
      "added": false,
      "afterName": "src/events/http/HttpServer.js",
      "beforeName": "src/events/http/HttpServer.js",
      "deleted": false,
      "modifiedLines": Array [
        Object {
          "added": false,
          "line": "        if (result && typeof result.body !== 'undefined') {",
          "lineNumber": 774,
        },
        Object {
          "added": true,
          "line": "        if (typeof result === 'string') {",
          "lineNumber": 774,
        },
        Object {
          "added": true,
          "line": "          response.source = JSON.stringify(result)",
          "lineNumber": 775,
        },
        Object {
          "added": true,
          "line": "        } else if (result && typeof result.body !== 'undefined') {",
          "lineNumber": 776,
        },
      ],
    },
  ],
}
`;
